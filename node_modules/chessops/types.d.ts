export declare type Square = number;
export declare type BySquare<T> = {
    [square: number]: T;
};
export declare type Color = 'white' | 'black';
export declare const COLORS: Color[];
export declare type ByColor<T> = {
    [color in Color]: T;
};
export declare type Role = 'pawn' | 'knight' | 'bishop' | 'rook' | 'queen' | 'king';
export declare const ROLES: Role[];
export declare type ByRole<T> = {
    [role in Role]: T;
};
export declare type CastlingSide = 'a' | 'h';
export declare const CASTLING_SIDES: CastlingSide[];
export declare type ByCastlingSide<T> = {
    [side in CastlingSide]: T;
};
export interface Piece {
    role: Role;
    color: Color;
    promoted?: boolean;
}
export interface UciMove {
    from: Square;
    to: Square;
    promotion?: Role;
}
export interface UciDrop {
    role: Role;
    to: Square;
}
export declare type Uci = UciMove | UciDrop;
export declare function isDrop(v: Uci): v is UciDrop;
export declare function isMove(v: Uci): v is UciMove;
export declare type Rules = 'chess' | 'antichess' | 'kingofthehill' | '3check' | 'atomic' | 'horde' | 'racingkings' | 'crazyhouse';
export declare const RULES: Rules[];
export interface Outcome {
    winner: Color | undefined;
}
