"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function withMainlineChild(node, f) {
    const next = node.children[0];
    return next ? f(next) : undefined;
}
exports.withMainlineChild = withMainlineChild;
function findInMainline(fromNode, predicate) {
    const findFrom = function (node) {
        if (predicate(node))
            return node;
        return withMainlineChild(node, findFrom);
    };
    return findFrom(fromNode);
}
exports.findInMainline = findInMainline;
// returns a list of nodes collected from the original one
function collect(from, pickChild) {
    let nodes = [from], n = from, c;
    while (c = pickChild(n)) {
        nodes.push(c);
        n = c;
    }
    return nodes;
}
exports.collect = collect;
function pickFirstChild(node) {
    return node.children[0];
}
function childById(node, id) {
    return node.children.find(child => child.id === id);
}
exports.childById = childById;
function last(nodeList) {
    return nodeList[nodeList.length - 1];
}
exports.last = last;
function nodeAtPly(nodeList, ply) {
    return nodeList.find(node => node.ply === ply);
}
exports.nodeAtPly = nodeAtPly;
function takePathWhile(nodeList, predicate) {
    let path = '';
    for (let i in nodeList) {
        if (predicate(nodeList[i]))
            path += nodeList[i].id;
        else
            break;
    }
    return path;
}
exports.takePathWhile = takePathWhile;
function removeChild(parent, id) {
    parent.children = parent.children.filter(function (n) {
        return n.id !== id;
    });
}
exports.removeChild = removeChild;
function countChildrenAndComments(node) {
    const count = {
        nodes: 1,
        comments: (node.comments || []).length
    };
    node.children.forEach(function (child) {
        const c = countChildrenAndComments(child);
        count.nodes += c.nodes;
        count.comments += c.comments;
    });
    return count;
}
exports.countChildrenAndComments = countChildrenAndComments;
function reconstruct(parts) {
    const root = parts[0], nb = parts.length;
    let node = root, i;
    root.id = '';
    for (i = 1; i < nb; i++) {
        const n = parts[i];
        if (node.children)
            node.children.unshift(n);
        else
            node.children = [n];
        node = n;
    }
    node.children = node.children || [];
    return root;
}
exports.reconstruct = reconstruct;
// adds n2 into n1
function merge(n1, n2) {
    n1.eval = n2.eval;
    if (n2.glyphs)
        n1.glyphs = n2.glyphs;
    n2.comments && n2.comments.forEach(function (c) {
        if (!n1.comments)
            n1.comments = [c];
        else if (!n1.comments.filter(function (d) {
            return d.text === c.text;
        }).length)
            n1.comments.push(c);
    });
    n2.children.forEach(function (c) {
        const existing = childById(n1, c.id);
        if (existing)
            merge(existing, c);
        else
            n1.children.push(c);
    });
}
exports.merge = merge;
function hasBranching(node, maxDepth) {
    return maxDepth <= 0 || !!node.children[1] || (node.children[0] && hasBranching(node.children[0], maxDepth - 1));
}
exports.hasBranching = hasBranching;
function mainlineNodeList(from) {
    return collect(from, pickFirstChild);
}
exports.mainlineNodeList = mainlineNodeList;
function updateAll(root, f) {
    // applies f recursively to all nodes
    function update(node) {
        f(node);
        node.children.forEach(update);
    }
    ;
    update(root);
}
exports.updateAll = updateAll;
//# sourceMappingURL=data:application/json;base64,