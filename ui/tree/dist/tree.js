"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const treePath = require("./path");
const ops = require("./ops");
const common_1 = require("common");
function build(root) {
    function lastNode() {
        return ops.findInMainline(root, function (node) {
            return !node.children.length;
        });
    }
    function nodeAtPath(path) {
        return nodeAtPathFrom(root, path);
    }
    function nodeAtPathFrom(node, path) {
        if (path === '')
            return node;
        const child = ops.childById(node, treePath.head(path));
        return child ? nodeAtPathFrom(child, treePath.tail(path)) : node;
    }
    function nodeAtPathOrNull(path) {
        return nodeAtPathOrNullFrom(root, path);
    }
    function nodeAtPathOrNullFrom(node, path) {
        if (path === '')
            return node;
        const child = ops.childById(node, treePath.head(path));
        return child ? nodeAtPathOrNullFrom(child, treePath.tail(path)) : undefined;
    }
    function longestValidPathFrom(node, path) {
        var id = treePath.head(path);
        const child = ops.childById(node, id);
        return child ? id + longestValidPathFrom(child, treePath.tail(path)) : '';
    }
    function getCurrentNodesAfterPly(nodeList, mainline, ply) {
        var node, nodes = [];
        for (var i in nodeList) {
            node = nodeList[i];
            if (node.ply <= ply && mainline[i].id !== node.id)
                break;
            if (node.ply > ply)
                nodes.push(node);
        }
        return nodes;
    }
    ;
    function pathIsMainline(path) {
        return pathIsMainlineFrom(root, path);
    }
    function pathExists(path) {
        return !!nodeAtPathOrNull(path);
    }
    function pathIsMainlineFrom(node, path) {
        if (path === '')
            return true;
        const pathId = treePath.head(path), child = node.children[0];
        if (!child || child.id !== pathId)
            return false;
        return pathIsMainlineFrom(child, treePath.tail(path));
    }
    function pathIsForcedVariation(path) {
        return !!getNodeList(path).find(n => n.forceVariation);
    }
    function lastMainlineNodeFrom(node, path) {
        if (path === '')
            return node;
        const pathId = treePath.head(path);
        const child = node.children[0];
        if (!child || child.id !== pathId)
            return node;
        return lastMainlineNodeFrom(child, treePath.tail(path));
    }
    function getNodeList(path) {
        return ops.collect(root, function (node) {
            const id = treePath.head(path);
            if (id === '')
                return;
            path = treePath.tail(path);
            return ops.childById(node, id);
        });
    }
    function getOpening(nodeList) {
        var opening;
        nodeList.forEach(function (node) {
            opening = node.opening || opening;
        });
        return opening;
    }
    function updateAt(path, update) {
        const node = nodeAtPathOrNull(path);
        if (node) {
            update(node);
            return node;
        }
        return;
    }
    // returns new path
    function addNode(node, path) {
        const newPath = path + node.id, existing = nodeAtPathOrNull(newPath);
        if (existing) {
            ['dests', 'drops', 'clock'].forEach(key => {
                if (common_1.defined(node[key]) && !common_1.defined(existing[key]))
                    existing[key] = node[key];
            });
            return newPath;
        }
        return updateAt(path, function (parent) {
            parent.children.push(node);
        }) ? newPath : undefined;
    }
    function addNodes(nodes, path) {
        var node = nodes[0];
        if (!node)
            return path;
        const newPath = addNode(node, path);
        return newPath ? addNodes(nodes.slice(1), newPath) : undefined;
    }
    function deleteNodeAt(path) {
        ops.removeChild(parentNode(path), treePath.last(path));
    }
    function promoteAt(path, toMainline) {
        var nodes = getNodeList(path);
        for (var i = nodes.length - 2; i >= 0; i--) {
            var node = nodes[i + 1];
            var parent = nodes[i];
            if (parent.children[0].id !== node.id) {
                ops.removeChild(parent, node.id);
                parent.children.unshift(node);
                if (!toMainline)
                    break;
            }
            else if (node.forceVariation) {
                node.forceVariation = false;
                if (!toMainline)
                    break;
            }
        }
    }
    function setCommentAt(comment, path) {
        return !comment.text ? deleteCommentAt(comment.id, path) : updateAt(path, function (node) {
            node.comments = node.comments || [];
            const existing = node.comments.find(function (c) {
                return c.id === comment.id;
            });
            if (existing)
                existing.text = comment.text;
            else
                node.comments.push(comment);
        });
    }
    function deleteCommentAt(id, path) {
        return updateAt(path, function (node) {
            var comments = (node.comments || []).filter(function (c) {
                return c.id !== id;
            });
            node.comments = comments.length ? comments : undefined;
        });
    }
    function setGlyphsAt(glyphs, path) {
        return updateAt(path, function (node) {
            node.glyphs = glyphs;
        });
    }
    function parentNode(path) {
        return nodeAtPath(treePath.init(path));
    }
    function getParentClock(node, path) {
        if (!('parentClock' in node)) {
            const par = path && parentNode(path);
            if (!par)
                node.parentClock = node.clock;
            else if (!('clock' in par))
                node.parentClock = undefined;
            else
                node.parentClock = par.clock;
        }
        return node.parentClock;
    }
    return {
        root,
        lastPly() {
            return lastNode().ply;
        },
        nodeAtPath,
        getNodeList,
        longestValidPath: (path) => longestValidPathFrom(root, path),
        getOpening,
        updateAt,
        addNode,
        addNodes,
        addDests(dests, path, opening) {
            return updateAt(path, function (node) {
                node.dests = dests;
                if (opening)
                    node.opening = opening;
            });
        },
        setShapes(shapes, path) {
            return updateAt(path, function (node) {
                node.shapes = shapes;
            });
        },
        setCommentAt,
        deleteCommentAt,
        setGlyphsAt,
        setClockAt(clock, path) {
            return updateAt(path, function (node) {
                node.clock = clock;
            });
        },
        pathIsMainline,
        pathIsForcedVariation,
        lastMainlineNode(path) {
            return lastMainlineNodeFrom(root, path);
        },
        pathExists,
        deleteNodeAt,
        promoteAt,
        forceVariationAt(path, force) {
            return updateAt(path, function (node) {
                node.forceVariation = force;
            });
        },
        getCurrentNodesAfterPly,
        merge(tree) {
            ops.merge(root, tree);
        },
        removeCeval() {
            ops.updateAll(root, function (n) {
                delete n.ceval;
                delete n.threat;
            });
        },
        removeComputerVariations() {
            ops.mainlineNodeList(root).forEach(function (n) {
                n.children = n.children.filter(function (c) {
                    return !c.comp;
                });
            });
        },
        parentNode,
        getParentClock
    };
}
exports.build = build;
//# sourceMappingURL=data:application/json;base64,