"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pool_1 = require("./pool");
const common_1 = require("common");
const storage_1 = require("common/storage");
const throttle_1 = require("common/throttle");
const winningChances_1 = require("./winningChances");
const li = window.lichess;
function sanIrreversible(variant, san) {
    if (san.startsWith('O-O'))
        return true;
    if (variant === 'crazyhouse')
        return false;
    if (san.includes('x'))
        return true; // capture
    if (san.toLowerCase() === san)
        return true; // pawn move
    return variant === 'threeCheck' && san.includes('+');
}
function officialStockfish(variant) {
    return variant === 'standard' || variant === 'chess960';
}
function is64Bit() {
    const x64 = ['x86_64', 'x86-64', 'Win64', 'x64', 'amd64', 'AMD64'];
    for (const substr of x64)
        if (navigator.userAgent.includes(substr))
            return true;
    return navigator.platform === 'Linux x86_64' || navigator.platform === 'MacIntel';
}
function sharedWasmMemory(initial, maximum) {
    // In theory 32 bit should be supported just the same, but some 32 bit
    // browser builds seem to have trouble with WASMX. So for now detect and
    // require a 64 bit platform.
    if (!is64Bit())
        return;
    // Atomics
    if (typeof Atomics !== 'object')
        return;
    // SharedArrayBuffer
    if (typeof SharedArrayBuffer !== 'function')
        return;
    // Shared memory
    const mem = new WebAssembly.Memory({ shared: true, initial, maximum });
    if (!(mem.buffer instanceof SharedArrayBuffer))
        return;
    // Structured cloning
    try {
        window.postMessage(mem, '*');
    }
    catch (e) {
        return;
    }
    return mem;
}
function median(values) {
    values.sort((a, b) => a - b);
    const half = Math.floor(values.length / 2);
    return values.length % 2 ? values[half] : (values[half - 1] + values[half]) / 2.0;
}
function default_1(opts) {
    const storageKey = (k) => {
        return opts.storageKeyPrefix ? `${opts.storageKeyPrefix}.${k}` : k;
    };
    // select wasmx with growable shared mem > wasmx > wasm > asmjs
    let technology = 'asmjs';
    let growableSharedMem = false;
    if (typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))) {
        technology = 'wasm'; // WebAssembly 1.0
        if (officialStockfish(opts.variant.key)) {
            const sharedMem = sharedWasmMemory(8, 16);
            if (sharedMem) {
                technology = 'wasmx';
                try {
                    sharedMem.grow(8);
                    growableSharedMem = true;
                }
                catch (e) { }
            }
        }
    }
    const maxThreads = Math.min(Math.max((navigator.hardwareConcurrency || 1) - 1, 1), growableSharedMem ? 16 : 2);
    const threads = storage_1.storedProp(storageKey('ceval.threads'), Math.min(Math.ceil((navigator.hardwareConcurrency || 1) / 4), maxThreads));
    const maxHashSize = Math.min((navigator.deviceMemory || 0.25) * 1024 / 8, growableSharedMem ? 1024 : 16);
    const hashSize = storage_1.storedProp(storageKey('ceval.hash-size'), 16);
    const minDepth = 6;
    const maxDepth = storage_1.storedProp(storageKey('ceval.max-depth'), 18);
    const multiPv = storage_1.storedProp(storageKey('ceval.multipv'), opts.multiPvDefault || 1);
    const infinite = storage_1.storedProp('ceval.infinite', false);
    let curEval = null;
    const enableStorage = li.storage.makeBoolean(storageKey('client-eval-enabled'));
    const allowed = common_1.prop(true);
    const enabled = common_1.prop(opts.possible && allowed() && enableStorage.get() && !document.hidden);
    let started = false;
    let lastStarted = false; // last started object (for going deeper even if stopped)
    const hovering = common_1.prop(null);
    const isDeeper = common_1.prop(false);
    const pool = new pool_1.Pool({
        technology,
        asmjs: 'vendor/stockfish.js/stockfish.js',
        wasm: 'vendor/stockfish.js/stockfish.wasm.js',
        wasmx: officialStockfish(opts.variant.key) ? 'vendor/stockfish.wasm/stockfish.js' : 'vendor/stockfish-mv.wasm/stockfish.js',
    }, {
        minDepth,
        variant: opts.variant.key,
        threads: technology == 'wasmx' && (() => Math.min(parseInt(threads()), maxThreads)),
        hashSize: technology == 'wasmx' && (() => Math.min(parseInt(hashSize()), maxHashSize)),
    });
    // adjusts maxDepth based on nodes per second
    const npsRecorder = (function () {
        const values = [];
        const applies = function (ev) {
            return ev.knps && ev.depth >= 16 &&
                typeof ev.cp !== 'undefined' && Math.abs(ev.cp) < 500 &&
                (ev.fen.split(/\s/)[0].split(/[nbrqkp]/i).length - 1) >= 10;
        };
        return function (ev) {
            if (!applies(ev))
                return;
            values.push(ev.knps);
            if (values.length > 9) {
                let depth = 18, knps = median(values) || 0;
                if (knps > 100)
                    depth = 19;
                if (knps > 150)
                    depth = 20;
                if (knps > 250)
                    depth = 21;
                if (knps > 500)
                    depth = 22;
                if (knps > 1000)
                    depth = 23;
                if (knps > 2000)
                    depth = 24;
                if (knps > 3500)
                    depth = 25;
                if (knps > 5000)
                    depth = 26;
                if (knps > 7000)
                    depth = 27;
                maxDepth(depth);
                if (values.length > 40)
                    values.shift();
            }
        };
    })();
    let lastEmitFen = null;
    const onEmit = throttle_1.default(200, (ev, work) => {
        sortPvsInPlace(ev.pvs, (work.ply % 2 === (work.threatMode ? 1 : 0)) ? 'white' : 'black');
        npsRecorder(ev);
        curEval = ev;
        opts.emit(ev, work);
        if (ev.fen !== lastEmitFen) {
            lastEmitFen = ev.fen;
            li.storage.fire('ceval.fen', ev.fen);
        }
    });
    const effectiveMaxDepth = () => (isDeeper() || infinite()) ? 99 : parseInt(maxDepth());
    const sortPvsInPlace = (pvs, color) => pvs.sort(function (a, b) {
        return winningChances_1.povChances(color, b) - winningChances_1.povChances(color, a);
    });
    const start = (path, steps, threatMode, deeper) => {
        if (!enabled() || !opts.possible)
            return;
        isDeeper(deeper);
        const maxD = effectiveMaxDepth();
        const step = steps[steps.length - 1];
        const existing = threatMode ? step.threat : step.ceval;
        if (existing && existing.depth >= maxD)
            return;
        const work = {
            initialFen: steps[0].fen,
            moves: [],
            currentFen: step.fen,
            path,
            ply: step.ply,
            maxDepth: maxD,
            multiPv: parseInt(multiPv()),
            threatMode,
            emit(ev) {
                if (enabled())
                    onEmit(ev, work);
            }
        };
        if (threatMode) {
            const c = step.ply % 2 === 1 ? 'w' : 'b';
            const fen = step.fen.replace(/ (w|b) /, ' ' + c + ' ');
            work.currentFen = fen;
            work.initialFen = fen;
        }
        else {
            // send fen after latest castling move and the following moves
            for (let i = 1; i < steps.length; i++) {
                let s = steps[i];
                if (sanIrreversible(opts.variant.key, s.san)) {
                    work.moves = [];
                    work.initialFen = s.fen;
                }
                else
                    work.moves.push(s.uci);
            }
        }
        pool.start(work);
        started = {
            path,
            steps,
            threatMode
        };
    };
    function goDeeper() {
        const s = started || lastStarted;
        if (s) {
            stop();
            start(s.path, s.steps, s.threatMode, true);
        }
    }
    ;
    function stop() {
        if (!enabled() || !started)
            return;
        pool.stop();
        lastStarted = started;
        started = false;
    }
    ;
    // ask other tabs if a game is in progress
    if (enabled()) {
        li.storage.fire('ceval.fen', 'start');
        li.storage.make('round.ongoing').listen(_ => {
            enabled(false);
            opts.redraw();
        });
    }
    return {
        technology,
        start,
        stop,
        allowed,
        possible: opts.possible,
        enabled,
        multiPv,
        threads: technology == 'wasmx' ? threads : undefined,
        hashSize: technology == 'wasmx' ? hashSize : undefined,
        maxThreads,
        maxHashSize,
        infinite,
        hovering,
        setHovering(fen, uci) {
            hovering(uci ? {
                fen,
                uci
            } : null);
            opts.setAutoShapes();
        },
        toggle() {
            if (!opts.possible || !allowed())
                return;
            stop();
            enabled(!enabled());
            if (document.visibilityState !== 'hidden')
                enableStorage.set(enabled());
        },
        curDepth: () => curEval ? curEval.depth : 0,
        effectiveMaxDepth,
        variant: opts.variant,
        isDeeper,
        goDeeper,
        canGoDeeper: () => !isDeeper() && !infinite() && !pool.isComputing(),
        isComputing: () => !!started && pool.isComputing(),
        engineName: pool.engineName,
        destroy: pool.destroy,
        redraw: opts.redraw
    };
}
exports.default = default_1;
;
//# sourceMappingURL=data:application/json;base64,