"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winningChances = require("./winningChances");
const common_1 = require("common");
const chess_1 = require("chess");
const snabbdom_1 = require("snabbdom");
const util_1 = require("chessops/util");
const fen_1 = require("chessops/fen");
const san_1 = require("chessops/san");
const variant_1 = require("chessops/variant");
let gaugeLast = 0;
const gaugeTicks = [...Array(8).keys()].map(i => snabbdom_1.h(i === 3 ? 'tick.zero' : 'tick', { attrs: { style: `height: ${(i + 1) * 12.5}%` } }));
function localEvalInfo(ctrl, evs) {
    const ceval = ctrl.getCeval(), trans = ctrl.trans;
    if (!evs.client)
        return [
            evs.server && ctrl.nextNodeBest() ? trans.noarg('usingServerAnalysis') : trans.noarg('loadingEngine'),
        ];
    const t = evs.client.cloud ? [
        trans('depthX', evs.client.depth || 0),
        snabbdom_1.h('span.cloud', { attrs: { title: trans.noarg('cloudAnalysis') } }, 'Cloud')
    ] : [
        trans('depthX', (evs.client.depth || 0) + '/' + evs.client.maxDepth)
    ];
    if (ceval.canGoDeeper())
        t.push(snabbdom_1.h('a.deeper', {
            attrs: {
                title: trans.noarg('goDeeper'),
                'data-icon': 'O'
            },
            hook: {
                insert: vnode => vnode.elm.addEventListener('click', () => {
                    ceval.goDeeper();
                    ceval.redraw();
                })
            }
        }));
    else if (!evs.client.cloud && evs.client.knps)
        t.push(', ' + Math.round(evs.client.knps) + ' knodes/s');
    return t;
}
function threatInfo(ctrl, threat) {
    if (!threat)
        return ctrl.trans.noarg('loadingEngine');
    let t = ctrl.trans('depthX', (threat.depth || 0) + '/' + threat.maxDepth);
    if (threat.knps)
        t += ', ' + Math.round(threat.knps) + ' knodes/s';
    return t;
}
function threatButton(ctrl) {
    if (ctrl.disableThreatMode && ctrl.disableThreatMode())
        return null;
    return snabbdom_1.h('a.show-threat', {
        class: {
            active: ctrl.threatMode(),
            hidden: !!ctrl.getNode().check
        },
        attrs: {
            'data-icon': '7',
            title: ctrl.trans.noarg('showThreat') + ' (x)'
        },
        hook: {
            insert: vnode => vnode.elm.addEventListener('click', ctrl.toggleThreatMode)
        }
    });
}
function engineName(ctrl) {
    const version = ctrl.engineName();
    return [
        snabbdom_1.h('span', version ? { attrs: { title: version } } : {}, ctrl.technology == 'wasmx' ? window.lichess.engineName : 'Stockfish 10+'),
        ctrl.technology == 'wasmx' ? snabbdom_1.h('span.native', { attrs: { title: 'Multi-threaded WebAssembly (experimental)' } }, 'wasmx') :
            (ctrl.technology == 'wasm' ? snabbdom_1.h('span.native', { attrs: { title: 'WebAssembly' } }, 'wasm') :
                snabbdom_1.h('span.asmjs', { attrs: { title: 'JavaScript fallback' } }, 'asmjs'))
    ];
}
const serverNodes = 4e6;
function getBestEval(evs) {
    const serverEv = evs.server, localEv = evs.client;
    if (!serverEv)
        return localEv;
    if (!localEv)
        return serverEv;
    // Prefer localEv if it exeeds fishnet node limit or finds a better mate.
    if (localEv.nodes > serverNodes ||
        (typeof localEv.mate !== 'undefined' && (typeof serverEv.mate === 'undefined' || Math.abs(localEv.mate) < Math.abs(serverEv.mate))))
        return localEv;
    return serverEv;
}
exports.getBestEval = getBestEval;
function renderGauge(ctrl) {
    if (ctrl.ongoing || !ctrl.showEvalGauge())
        return;
    let ev, bestEv = getBestEval(ctrl.currentEvals());
    if (bestEv) {
        ev = winningChances.povChances('white', bestEv);
        gaugeLast = ev;
    }
    else
        ev = gaugeLast;
    return snabbdom_1.h('div.eval-gauge', {
        class: {
            empty: ev === null,
            reverse: ctrl.getOrientation() === 'black'
        }
    }, [
        snabbdom_1.h('div.black', { attrs: { style: `height: ${100 - (ev + 1) * 50}%` } }),
        ...gaugeTicks
    ]);
}
exports.renderGauge = renderGauge;
function renderCeval(ctrl) {
    const instance = ctrl.getCeval(), trans = ctrl.trans;
    if (!instance.allowed() || !instance.possible || !ctrl.showComputer())
        return;
    const enabled = instance.enabled(), evs = ctrl.currentEvals(), threatMode = ctrl.threatMode(), threat = threatMode && ctrl.getNode().threat, bestEv = threat || getBestEval(evs);
    let pearl, percent;
    if (bestEv && typeof bestEv.cp !== 'undefined') {
        pearl = chess_1.renderEval(bestEv.cp);
        percent = evs.client ? Math.min(100, Math.round(100 * evs.client.depth / (evs.client.maxDepth || instance.effectiveMaxDepth()))) : 0;
    }
    else if (bestEv && common_1.defined(bestEv.mate)) {
        pearl = '#' + bestEv.mate;
        percent = 100;
    }
    else if (ctrl.gameOver()) {
        pearl = '-';
        percent = 0;
    }
    else {
        pearl = enabled ? snabbdom_1.h('i.ddloader') : snabbdom_1.h('i');
        percent = 0;
    }
    if (threatMode) {
        if (threat)
            percent = Math.min(100, Math.round(100 * threat.depth / threat.maxDepth));
        else
            percent = 0;
    }
    const progressBar = enabled ? snabbdom_1.h('div.bar', snabbdom_1.h('span', {
        class: { threat: threatMode },
        attrs: { style: `width: ${percent}%` },
        hook: {
            postpatch: (old, vnode) => {
                if (old.data.percent > percent || !!old.data.threatMode != threatMode) {
                    const el = vnode.elm;
                    const p = el.parentNode;
                    p.removeChild(el);
                    p.appendChild(el);
                }
                vnode.data.percent = percent;
                vnode.data.threatMode = threatMode;
            }
        }
    })) : null;
    const body = enabled ? [
        snabbdom_1.h('pearl', [pearl]),
        snabbdom_1.h('div.engine', [
            ...(threatMode ? [trans.noarg('showThreat')] : engineName(instance)),
            snabbdom_1.h('span.info', ctrl.gameOver() ? [trans.noarg('gameOver')] :
                (threatMode ? [threatInfo(ctrl, threat)] : localEvalInfo(ctrl, evs)))
        ])
    ] : [
        pearl ? snabbdom_1.h('pearl', [pearl]) : null,
        snabbdom_1.h('help', [
            ...engineName(instance),
            snabbdom_1.h('br'),
            trans.noarg('inLocalBrowser')
        ])
    ];
    const switchButton = ctrl.mandatoryCeval && ctrl.mandatoryCeval() ? null : snabbdom_1.h('div.switch', {
        attrs: { title: trans.noarg('toggleLocalEvaluation') + ' (l)' }
    }, [
        snabbdom_1.h('input#analyse-toggle-ceval.cmn-toggle.cmn-toggle--subtle', {
            attrs: {
                type: 'checkbox',
                checked: enabled
            },
            hook: {
                insert: vnode => vnode.elm.addEventListener('change', ctrl.toggleCeval)
            }
        }),
        snabbdom_1.h('label', { attrs: { 'for': 'analyse-toggle-ceval' } })
    ]);
    return snabbdom_1.h('div.ceval' + (enabled ? '.enabled' : ''), {
        class: {
            computing: percent < 100 && instance.isComputing()
        }
    }, [
        progressBar,
        ...body,
        threatButton(ctrl),
        switchButton
    ]);
}
exports.renderCeval = renderCeval;
function getElFen(el) {
    return el.getAttribute('data-fen');
}
function getElUci(e) {
    return $(e.target).closest('div.pv').attr('data-uci');
}
function checkHover(el, instance) {
    window.lichess.requestIdleCallback(() => {
        instance.setHovering(getElFen(el), $(el).find('div.pv:hover').attr('data-uci'));
    });
}
function renderPvs(ctrl) {
    const instance = ctrl.getCeval();
    if (!instance.allowed() || !instance.possible || !instance.enabled())
        return;
    const multiPv = parseInt(instance.multiPv()), node = ctrl.getNode(), setup = fen_1.parseFen(node.fen).unwrap();
    let pvs, threat = false;
    if (ctrl.threatMode() && node.threat) {
        pvs = node.threat.pvs;
        threat = true;
    }
    else if (node.ceval)
        pvs = node.ceval.pvs;
    else
        pvs = [];
    if (threat)
        setup.turn = util_1.opposite(setup.turn);
    const pos = variant_1.setupPosition(chess_1.variantToRules(instance.variant.key), setup);
    return snabbdom_1.h('div.pv_box', {
        attrs: { 'data-fen': node.fen },
        hook: {
            insert: vnode => {
                const el = vnode.elm;
                el.addEventListener('mouseover', (e) => {
                    instance.setHovering(getElFen(el), getElUci(e));
                });
                el.addEventListener('mouseout', () => {
                    instance.setHovering(getElFen(el));
                });
                el.addEventListener('mousedown', (e) => {
                    const uci = getElUci(e);
                    if (uci)
                        ctrl.playUci(uci);
                });
                checkHover(el, instance);
            },
            postpatch: (_, vnode) => checkHover(vnode.elm, instance)
        }
    }, [...Array(multiPv).keys()].map(function (i) {
        if (!pvs[i])
            return snabbdom_1.h('div.pv');
        return snabbdom_1.h('div.pv', threat ? {} : {
            attrs: { 'data-uci': pvs[i].moves[0] }
        }, [
            multiPv > 1 ? snabbdom_1.h('strong', common_1.defined(pvs[i].mate) ? ('#' + pvs[i].mate) : chess_1.renderEval(pvs[i].cp)) : null,
            snabbdom_1.h('span', pos.unwrap(pos => san_1.makeSanVariation(pos, pvs[i].moves.slice(0, 12).map(m => util_1.parseUci(m))), _ => '--'))
        ]);
    }));
}
exports.renderPvs = renderPvs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy92aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbURBQW1EO0FBQ25ELG1DQUFpQztBQUNqQyxpQ0FBbUQ7QUFDbkQsdUNBQTRCO0FBRTVCLHdDQUFtRDtBQUNuRCxzQ0FBd0M7QUFDeEMsc0NBQWdEO0FBQ2hELDhDQUFpRDtBQUVqRCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDbEIsTUFBTSxVQUFVLEdBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUN2RCxZQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FDdEYsQ0FBQztBQUVGLFNBQVMsYUFBYSxDQUFDLElBQWdCLEVBQUUsR0FBYztJQUNyRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNO1FBQUUsT0FBTztZQUN0QixHQUFHLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQztTQUN0RyxDQUFDO0lBRUYsTUFBTSxDQUFDLEdBQTBCLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNsRCxLQUFLLENBQUMsUUFBUSxF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QUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqSCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQTFDRCw4QkEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmFsLCBDZXZhbEN0cmwsIFBhcmVudEN0cmwsIE5vZGVFdmFscyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0ICogYXMgd2lubmluZ0NoYW5jZXMgZnJvbSAnLi93aW5uaW5nQ2hhbmNlcyc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnY29tbW9uJztcbmltcG9ydCB7IHJlbmRlckV2YWwsIHZhcmlhbnRUb1J1bGVzIH0gZnJvbSAnY2hlc3MnO1xuaW1wb3J0IHsgaCB9IGZyb20gJ3NuYWJiZG9tJ1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICdzbmFiYmRvbS92bm9kZSdcbmltcG9ydCB7IG9wcG9zaXRlLCBwYXJzZVVjaSB9IGZyb20gJ2NoZXNzb3BzL3V0aWwnO1xuaW1wb3J0IHsgcGFyc2VGZW4gfSBmcm9tICdjaGVzc29wcy9mZW4nO1xuaW1wb3J0IHsgbWFrZVNhblZhcmlhdGlvbiB9IGZyb20gJ2NoZXNzb3BzL3Nhbic7XG5pbXBvcnQgeyBzZXR1cFBvc2l0aW9uIH0gZnJvbSAnY2hlc3NvcHMvdmFyaWFudCc7XG5cbmxldCBnYXVnZUxhc3QgPSAwO1xuY29uc3QgZ2F1Z2VUaWNrczogVk5vZGVbXSA9IFsuLi5BcnJheSg4KS5rZXlzKCldLm1hcChpID0+XG4gIGgoaSA9PT0gMyA/ICd0aWNrLnplcm8nIDogJ3RpY2snLCB7IGF0dHJzOiB7IHN0eWxlOiBgaGVpZ2h0OiAkeyhpICsgMSkgKiAxMi41fSVgIH0gfSlcbik7XG5cbmZ1bmN0aW9uIGxvY2FsRXZhbEluZm8oY3RybDogUGFyZW50Q3RybCwgZXZzOiBOb2RlRXZhbHMpOiBBcnJheTxWTm9kZSB8IHN0cmluZz4ge1xuICBjb25zdCBjZXZhbCA9IGN0cmwuZ2V0Q2V2YWwoKSwgdHJhbnMgPSBjdHJsLnRyYW5zO1xuICBpZiAoIWV2cy5jbGllbnQpIHJldHVybiBbXG4gICAgZXZzLnNlcnZlciAmJiBjdHJsLm5leHROb2RlQmVzdCgpID8gdHJhbnMubm9hcmcoJ3VzaW5nU2VydmVyQW5hbHlzaXMnKSA6IHRyYW5zLm5vYXJnKCdsb2FkaW5nRW5naW5lJyksXG4gIF07XG5cbiAgY29uc3QgdDogQXJyYXk8Vk5vZGUgfCBzdHJpbmc+ID0gZXZzLmNsaWVudC5jbG91ZCA/IFtcbiAgICB0cmFucygnZGVwdGhYJywgZXZzLmNsaWVudC5kZXB0aCB8fCAwKSxcbiAgICBoKCdzcGFuLmNsb3VkJywgeyBhdHRyczogeyB0aXRsZTogdHJhbnMubm9hcmcoJ2Nsb3VkQW5hbHlzaXMnKSB9IH0sICdDbG91ZCcpXG4gIF0gOiBbXG4gICAgdHJhbnMoJ2RlcHRoWCcsIChldnMuY2xpZW50LmRlcHRoIHx8IDApICsgJy8nICsgZXZzLmNsaWVudC5tYXhEZXB0aClcbiAgXTtcbiAgaWYgKGNldmFsLmNhbkdvRGVlcGVyKCkpIHQucHVzaChoKCdhLmRlZXBlcicsIHtcbiAgICBhdHRyczoge1xuICAgICAgdGl0bGU6IHRyYW5zLm5vYXJnKCdnb0RlZXBlcicpLFxuICAgICAgJ2RhdGEtaWNvbic6ICdPJ1xuICAgIH0sXG4gICAgaG9vazoge1xuICAgICAgaW5zZXJ0OiB2bm9kZSA9PiAodm5vZGUuZWxtIGFzIEhUTUxFbGVtZW50KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY2V2YWwuZ29EZWVwZXIoKTtcbiAgICAgICAgY2V2YWwucmVkcmF3KCk7XG4gICAgICB9KVxuICAgIH1cbiAgfSkpO1xuICBlbHNlIGlmICghZXZzLmNsaWVudC5jbG91ZCAmJiBldnMuY2xpZW50LmtucHMpIHQucHVzaCgnLCAnICsgTWF0aC5yb3VuZChldnMuY2xpZW50LmtucHMpICsgJyBrbm9kZXMvcycpO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gdGhyZWF0SW5mbyhjdHJsOiBQYXJlbnRDdHJsLCB0aHJlYXQ/OiBUcmVlLkNsaWVudEV2YWwgfCBmYWxzZSk6IHN0cmluZyB7XG4gIGlmICghdGhyZWF0KSByZXR1cm4gY3RybC50cmFucy5ub2FyZygnbG9hZGluZ0VuZ2luZScpO1xuICBsZXQgdCA9IGN0cmwudHJhbnMoJ2RlcHRoWCcsICh0aHJlYXQuZGVwdGggfHwgMCkgKyAnLycgKyB0aHJlYXQubWF4RGVwdGgpO1xuICBpZiAodGhyZWF0LmtucHMpIHQgKz0gJywgJyArIE1hdGgucm91bmQodGhyZWF0LmtucHMpICsgJyBrbm9kZXMvcyc7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiB0aHJlYXRCdXR0b24oY3RybDogUGFyZW50Q3RybCk6IFZOb2RlIHwgbnVsbCB7XG4gIGlmIChjdHJsLmRpc2FibGVUaHJlYXRNb2RlICYmIGN0cmwuZGlzYWJsZVRocmVhdE1vZGUoKSkgcmV0dXJuIG51bGw7XG4gIHJldHVybiBoKCdhLnNob3ctdGhyZWF0Jywge1xuICAgIGNsYXNzOiB7XG4gICAgICBhY3RpdmU6IGN0cmwudGhyZWF0TW9kZSgpLFxuICAgICAgaGlkZGVuOiAhIWN0cmwuZ2V0Tm9kZSgpLmNoZWNrXG4gICAgfSxcbiAgICBhdHRyczoge1xuICAgICAgJ2RhdGEtaWNvbic6ICc3JyxcbiAgICAgIHRpdGxlOiBjdHJsLnRyYW5zLm5vYXJnKCdzaG93VGhyZWF0JykgKyAnICh4KSdcbiAgICB9LFxuICAgIGhvb2s6IHtcbiAgICAgIGluc2VydDogdm5vZGUgPT4gKHZub2RlLmVsbSBhcyBIVE1MRWxlbWVudCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjdHJsLnRvZ2dsZVRocmVhdE1vZGUpXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZW5naW5lTmFtZShjdHJsOiBDZXZhbEN0cmwpOiBWTm9kZVtdIHtcbiAgY29uc3QgdmVyc2lvbiA9IGN0cmwuZW5naW5lTmFtZSgpO1xuICByZXR1cm4gW1xuICAgIGgoJ3NwYW4nLCB2ZXJzaW9uID8geyBhdHRyczogeyB0aXRsZTogdmVyc2lvbiB9IH0gOiB7fSwgY3RybC50ZWNobm9sb2d5ID09ICd3YXNteCcgPyB3aW5kb3cubGljaGVzcy5lbmdpbmVOYW1lIDogJ1N0b2NrZmlzaCAxMCsnKSxcbiAgICBjdHJsLnRlY2hub2xvZ3kgPT0gJ3dhc214JyA/IGgoJ3NwYW4ubmF0aXZlJywgeyBhdHRyczogeyB0aXRsZTogJ011bHRpLXRocmVhZGVkIFdlYkFzc2VtYmx5IChleHBlcmltZW50YWwpJyB9IH0sICd3YXNteCcpIDpcbiAgICAgIChjdHJsLnRlY2hub2xvZ3kgPT0gJ3dhc20nID8gaCgnc3Bhbi5uYXRpdmUnLCB7IGF0dHJzOiB7IHRpdGxlOiAnV2ViQXNzZW1ibHknIH0gfSwgJ3dhc20nKSA6XG4gICAgICAgIGgoJ3NwYW4uYXNtanMnLCB7IGF0dHJzOiB7IHRpdGxlOiAnSmF2YVNjcmlwdCBmYWxsYmFjaycgfSB9LCAnYXNtanMnKSlcbiAgXTtcbn1cblxuY29uc3Qgc2VydmVyTm9kZXMgPSA0ZTY7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0RXZhbChldnM6IE5vZGVFdmFscyk6IEV2YWwgfCB1bmRlZmluZWQge1xuICBjb25zdCBzZXJ2ZXJFdiA9IGV2cy5zZXJ2ZXIsXG4gICAgbG9jYWxFdiA9IGV2cy5jbGllbnQ7XG5cbiAgaWYgKCFzZXJ2ZXJFdikgcmV0dXJuIGxvY2FsRXY7XG4gIGlmICghbG9jYWxFdikgcmV0dXJuIHNlcnZlckV2O1xuXG4gIC8vIFByZWZlciBsb2NhbEV2IGlmIGl0IGV4ZWVkcyBmaXNobmV0IG5vZGUgbGltaXQgb3IgZmluZHMgYSBiZXR0ZXIgbWF0ZS5cbiAgaWYgKGxvY2FsRXYubm9kZXMgPiBzZXJ2ZXJOb2RlcyB8fFxuICAgICh0eXBlb2YgbG9jYWxFdi5tYXRlICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIHNlcnZlckV2Lm1hdGUgPT09ICd1bmRlZmluZWQnIHx8IE1hdGguYWJzKGxvY2FsRXYubWF0ZSkgPCBNYXRoLmFicyhzZXJ2ZXJFdi5tYXRlKSkpKVxuICAgIHJldHVybiBsb2NhbEV2O1xuXG4gIHJldHVybiBzZXJ2ZXJFdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckdhdWdlKGN0cmw6IFBhcmVudEN0cmwpOiBWTm9kZSB8IHVuZGVmaW5lZCB7XG4gIGlmIChjdHJsLm9uZ29pbmcgfHwgIWN0cmwuc2hvd0V2YWxHYXVnZSgpKSByZXR1cm47XG4gIGxldCBldiwgYmVzdEV2ID0gZ2V0QmVzdEV2YWwoY3RybC5jdXJyZW50RXZhbHMoKSk7XG4gIGlmIChiZXN0RXYpIHtcbiAgICBldiA9IHdpbm5pbmdDaGFuY2VzLnBvdkNoYW5jZXMoJ3doaXRlJywgYmVzdEV2KTtcbiAgICBnYXVnZUxhc3QgPSBldjtcbiAgfSBlbHNlIGV2ID0gZ2F1Z2VMYXN0O1xuICByZXR1cm4gaCgnZGl2LmV2YWwtZ2F1Z2UnLCB7XG4gICAgY2xhc3M6IHtcbiAgICAgIGVtcHR5OiBldiA9PT0gbnVsbCxcbiAgICAgIHJldmVyc2U6IGN0cmwuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ2JsYWNrJ1xuICAgIH1cbiAgfSwgW1xuICAgIGgoJ2Rpdi5ibGFjaycsIHsgYXR0cnM6IHsgc3R5bGU6IGBoZWlnaHQ6ICR7MTAwIC0gKGV2ICsgMSkgKiA1MH0lYCB9IH0pLFxuICAgIC4uLmdhdWdlVGlja3NcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJDZXZhbChjdHJsOiBQYXJlbnRDdHJsKTogVk5vZGUgfCB1bmRlZmluZWQge1xuICBjb25zdCBpbnN0YW5jZSA9IGN0cmwuZ2V0Q2V2YWwoKSwgdHJhbnMgPSBjdHJsLnRyYW5zO1xuICBpZiAoIWluc3RhbmNlLmFsbG93ZWQoKSB8fCAhaW5zdGFuY2UucG9zc2libGUgfHwgIWN0cmwuc2hvd0NvbXB1dGVyKCkpIHJldHVybjtcbiAgY29uc3QgZW5hYmxlZCA9IGluc3RhbmNlLmVuYWJsZWQoKSxcbiAgICBldnMgPSBjdHJsLmN1cnJlbnRFdmFscygpLFxuICAgIHRocmVhdE1vZGUgPSBjdHJsLnRocmVhdE1vZGUoKSxcbiAgICB0aHJlYXQgPSB0aHJlYXRNb2RlICYmIGN0cmwuZ2V0Tm9kZSgpLnRocmVhdCxcbiAgICBiZXN0RXYgPSB0aHJlYXQgfHwgZ2V0QmVzdEV2YWwoZXZzKTtcbiAgbGV0IHBlYXJsOiBWTm9kZSB8IHN0cmluZywgcGVyY2VudDogbnVtYmVyO1xuICBpZiAoYmVzdEV2ICYmIHR5cGVvZiBiZXN0RXYuY3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcGVhcmwgPSByZW5kZXJFdmFsKGJlc3RFdi5jcCk7XG4gICAgcGVyY2VudCA9IGV2cy5jbGllbnQgPyBNYXRoLm1pbigxMDAsIE1hdGgucm91bmQoMTAwICogZXZzLmNsaWVudC5kZXB0aCAvIChldnMuY2xpZW50Lm1heERlcHRoIHx8IGluc3RhbmNlLmVmZmVjdGl2ZU1heERlcHRoKCkpKSkgOiAwO1xuICB9IGVsc2UgaWYgKGJlc3RFdiAmJiBkZWZpbmVkKGJlc3RFdi5tYXRlKSkge1xuICAgIHBlYXJsID0gJyMnICsgYmVzdEV2Lm1hdGU7XG4gICAgcGVyY2VudCA9IDEwMDtcbiAgfSBlbHNlIGlmIChjdHJsLmdhbWVPdmVyKCkpIHtcbiAgICBwZWFybCA9ICctJztcbiAgICBwZXJjZW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBwZWFybCA9IGVuYWJsZWQgPyBoKCdpLmRkbG9hZGVyJykgOiBoKCdpJyk7XG4gICAgcGVyY2VudCA9IDA7XG4gIH1cbiAgaWYgKHRocmVhdE1vZGUpIHtcbiAgICBpZiAodGhyZWF0KSBwZXJjZW50ID0gTWF0aC5taW4oMTAwLCBNYXRoLnJvdW5kKDEwMCAqIHRocmVhdC5kZXB0aCAvIHRocmVhdC5tYXhEZXB0aCkpO1xuICAgIGVsc2UgcGVyY2VudCA9IDA7XG4gIH1cblxuICBjb25zdCBwcm9ncmVzc0JhcjogVk5vZGUgfCBudWxsID0gZW5hYmxlZCA/IGgoJ2Rpdi5iYXInLCBoKCdzcGFuJywge1xuICAgIGNsYXNzOiB7IHRocmVhdDogdGhyZWF0TW9kZSB9LFxuICAgIGF0dHJzOiB7IHN0eWxlOiBgd2lkdGg6ICR7cGVyY2VudH0lYCB9LFxuICAgIGhvb2s6IHtcbiAgICAgIHBvc3RwYXRjaDogKG9sZCwgdm5vZGUpID0+IHtcbiAgICAgICAgaWYgKG9sZC5kYXRhIS5wZXJjZW50ID4gcGVyY2VudCB8fCAhIW9sZC5kYXRhIS50aHJlYXRNb2RlICE9IHRocmVhdE1vZGUpIHtcbiAgICAgICAgICBjb25zdCBlbCA9IHZub2RlLmVsbSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICBjb25zdCBwID0gZWwucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgICBwLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICBwLmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgfVxuICAgICAgICB2bm9kZS5kYXRhIS5wZXJjZW50ID0gcGVyY2VudDtcbiAgICAgICAgdm5vZGUuZGF0YSEudGhyZWF0TW9kZSA9IHRocmVhdE1vZGU7XG4gICAgICB9XG4gICAgfVxuICB9KSkgOiBudWxsO1xuXG4gIGNvbnN0IGJvZHk6IEFycmF5PFZOb2RlIHwgbnVsbD4gPSBlbmFibGVkID8gW1xuICAgIGgoJ3BlYXJsJywgW3BlYXJsXSksXG4gICAgaCgnZGl2LmVuZ2luZScsIFtcbiAgICAgIC4uLih0aHJlYXRNb2RlID8gW3RyYW5zLm5vYXJnKCdzaG93VGhyZWF0JyldIDogZW5naW5lTmFtZShpbnN0YW5jZSkpLFxuICAgICAgaCgnc3Bhbi5pbmZvJyxcbiAgICAgICAgY3RybC5nYW1lT3ZlcigpID8gW3RyYW5zLm5vYXJnKCdnYW1lT3ZlcicpXSA6XG4gICAgICAgICh0aHJlYXRNb2RlID8gW3RocmVhdEluZm8oY3RybCwgdGhyZWF0KV0gOiBsb2NhbEV2YWxJbmZvKGN0cmwsIGV2cykpXG4gICAgICApXG4gICAgXSlcbiAgXSA6IFtcbiAgICBwZWFybCA/IGgoJ3BlYXJsJywgW3BlYXJsXSkgOiBudWxsLFxuICAgIGgoJ2hlbHAnLCBbXG4gICAgICAuLi5lbmdpbmVOYW1lKGluc3RhbmNlKSxcbiAgICAgIGgoJ2JyJyksXG4gICAgICB0cmFucy5ub2FyZygnaW5Mb2NhbEJyb3dzZXInKVxuICAgIF0pXG4gIF07XG5cbiAgY29uc3Qgc3dpdGNoQnV0dG9uOiBWTm9kZSB8IG51bGwgPSBjdHJsLm1hbmRhdG9yeUNldmFsICYmIGN0cmwubWFuZGF0b3J5Q2V2YWwoKSA/IG51bGwgOiBoKCdkaXYuc3dpdGNoJywge1xuICAgIGF0dHJzOiB7IHRpdGxlOiB0cmFucy5ub2FyZygndG9nZ2xlTG9jYWxFdmFsdWF0aW9uJykgKyAnIChsKScgfVxuICB9LCBbXG4gICAgaCgnaW5wdXQjYW5hbHlzZS10b2dnbGUtY2V2YWwuY21uLXRvZ2dsZS5jbW4tdG9nZ2xlLS1zdWJ0bGUnLCB7XG4gICAgICBhdHRyczoge1xuICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICBjaGVja2VkOiBlbmFibGVkXG4gICAgICB9LFxuICAgICAgaG9vazoge1xuICAgICAgICBpbnNlcnQ6IHZub2RlID0+ICh2bm9kZS5lbG0gYXMgSFRNTEVsZW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGN0cmwudG9nZ2xlQ2V2YWwpXG4gICAgICB9XG4gICAgfSksXG4gICAgaCgnbGFiZWwnLCB7IGF0dHJzOiB7ICdmb3InOiAnYW5hbHlzZS10b2dnbGUtY2V2YWwnIH0gfSlcbiAgXSlcblxuICByZXR1cm4gaCgnZGl2LmNldmFsJyArIChlbmFibGVkID8gJy5lbmFibGVkJyA6ICcnKSwge1xuICAgIGNsYXNzOiB7XG4gICAgICBjb21wdXRpbmc6IHBlcmNlbnQgPCAxMDAgJiYgaW5zdGFuY2UuaXNDb21wdXRpbmcoKVxuICAgIH1cbiAgfSwgW1xuICAgIHByb2dyZXNzQmFyLFxuICAgIC4uLmJvZHksXG4gICAgdGhyZWF0QnV0dG9uKGN0cmwpLFxuICAgIHN3aXRjaEJ1dHRvblxuICBdKTtcbn1cblxuZnVuY3Rpb24gZ2V0RWxGZW4oZWw6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcbiAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1mZW4nKSE7XG59XG5cbmZ1bmN0aW9uIGdldEVsVWNpKGU6IE1vdXNlRXZlbnQpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gJChlLnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xvc2VzdCgnZGl2LnB2JykuYXR0cignZGF0YS11Y2knKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tIb3ZlcihlbDogSFRNTEVsZW1lbnQsIGluc3RhbmNlOiBDZXZhbEN0cmwpOiB2b2lkIHtcbiAgd2luZG93LmxpY2hlc3MucmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgaW5zdGFuY2Uuc2V0SG92ZXJpbmcoZ2V0RWxGZW4oZWwpLCAkKGVsKS5maW5kKCdkaXYucHY6aG92ZXInKS5hdHRyKCdkYXRhLXVjaScpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJQdnMoY3RybDogUGFyZW50Q3RybCkge1xuICBjb25zdCBpbnN0YW5jZSA9IGN0cmwuZ2V0Q2V2YWwoKTtcbiAgaWYgKCFpbnN0YW5jZS5hbGxvd2VkKCkgfHwgIWluc3RhbmNlLnBvc3NpYmxlIHx8ICFpbnN0YW5jZS5lbmFibGVkKCkpIHJldHVybjtcbiAgY29uc3QgbXVsdGlQdiA9IHBhcnNlSW50KGluc3RhbmNlLm11bHRpUHYoKSksXG4gICAgbm9kZSA9IGN0cmwuZ2V0Tm9kZSgpLFxuICAgIHNldHVwID0gcGFyc2VGZW4obm9kZS5mZW4pLnVud3JhcCgpO1xuICBsZXQgcHZzIDogVHJlZS5QdkRhdGFbXSwgdGhyZWF0ID0gZmFsc2U7XG4gIGlmIChjdHJsLnRocmVhdE1vZGUoKSAmJiBub2RlLnRocmVhdCkge1xuICAgIHB2cyA9IG5vZGUudGhyZWF0LnB2cztcbiAgICB0aHJlYXQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKG5vZGUuY2V2YWwpIHB2cyA9IG5vZGUuY2V2YWwucHZzO1xuICBlbHNlIHB2cyA9IFtdO1xuICBpZiAodGhyZWF0KSBzZXR1cC50dXJuID0gb3Bwb3NpdGUoc2V0dXAudHVybik7XG4gIGNvbnN0IHBvcyA9IHNldHVwUG9zaXRpb24odmFyaWFudFRvUnVsZXMoaW5zdGFuY2UudmFyaWFudC5rZXkpLCBzZXR1cCk7XG4gIHJldHVybiBoKCdkaXYucHZfYm94Jywge1xuICAgIGF0dHJzOiB7ICdkYXRhLWZlbic6IG5vZGUuZmVuIH0sXG4gICAgaG9vazoge1xuICAgICAgaW5zZXJ0OiB2bm9kZSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gdm5vZGUuZWxtIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgIGluc3RhbmNlLnNldEhvdmVyaW5nKGdldEVsRmVuKGVsKSwgZ2V0RWxVY2koZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2Uuc2V0SG92ZXJpbmcoZ2V0RWxGZW4oZWwpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgdWNpID0gZ2V0RWxVY2koZSk7XG4gICAgICAgICAgaWYgKHVjaSkgY3RybC5wbGF5VWNpKHVjaSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja0hvdmVyKGVsLCBpbnN0YW5jZSk7XG4gICAgICB9LFxuICAgICAgcG9zdHBhdGNoOiAoXywgdm5vZGUpID0+IGNoZWNrSG92ZXIodm5vZGUuZWxtIGFzIEhUTUxFbGVtZW50LCBpbnN0YW5jZSlcbiAgICB9XG4gIH0sIFsuLi5BcnJheShtdWx0aVB2KS5rZXlzKCldLm1hcChmdW5jdGlvbihpKSB7XG4gICAgaWYgKCFwdnNbaV0pIHJldHVybiBoKCdkaXYucHYnKTtcbiAgICByZXR1cm4gaCgnZGl2LnB2JywgdGhyZWF0ID8ge30gOiB7XG4gICAgICBhdHRyczogeyAnZGF0YS11Y2knOiBwdnNbaV0ubW92ZXNbMF0gfVxuICAgIH0sIFtcbiAgICAgIG11bHRpUHYgPiAxID8gaCgnc3Ryb25nJywgZGVmaW5lZChwdnNbaV0ubWF0ZSkgPyAoJyMnICsgcHZzW2ldLm1hdGUpIDogcmVuZGVyRXZhbChwdnNbaV0uY3AhKSkgOiBudWxsLFxuICAgICAgaCgnc3BhbicsIHBvcy51bndyYXAocG9zID0+IG1ha2VTYW5WYXJpYXRpb24ocG9zLCBwdnNbaV0ubW92ZXMuc2xpY2UoMCwgMTIpLm1hcChtID0+IHBhcnNlVWNpKG0pISkpLCBfID0+ICctLScpKVxuICAgIF0pO1xuICB9KSk7XG59XG4iXX0=