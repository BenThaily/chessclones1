"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sync_1 = require("common/sync");
const stockfishProtocol_1 = require("./stockfishProtocol");
class AbstractWorker {
    constructor(url, poolOpts, workerOpts) {
        this.url = url;
        this.poolOpts = poolOpts;
        this.workerOpts = workerOpts;
        this.isComputing = () => !!this.protocol.sync && this.protocol.sync.isComputing();
        this.engineName = () => this.protocol.sync && this.protocol.sync.engineName;
        this.protocol = sync_1.sync(this.boot());
    }
    stop() {
        return this.protocol.promise.then(protocol => protocol.stop());
    }
    start(work) {
        return this.protocol.promise.then(protocol => {
            return protocol.stop().then(() => protocol.start(work));
        });
    }
}
exports.AbstractWorker = AbstractWorker;
class WebWorker extends AbstractWorker {
    boot() {
        this.worker = new Worker(window.lichess.assetUrl(this.url, { sameDomain: true }));
        const protocol = new stockfishProtocol_1.default(this.send.bind(this), this.workerOpts);
        this.worker.addEventListener('message', e => {
            protocol.received(e.data);
        }, true);
        return Promise.resolve(protocol);
    }
    start(work) {
        // wait for boot
        return this.protocol.promise.then(protocol => {
            const timeout = new Promise((_, reject) => setTimeout(reject, 1000));
            return Promise.race([protocol.stop(), timeout]).catch(() => {
                // reboot if not stopped after 1s
                this.destroy();
                this.protocol = sync_1.sync(this.boot());
            }).then(() => {
                return this.protocol.promise.then(protocol => protocol.start(work));
            });
        });
    }
    destroy() {
        this.worker.terminate();
    }
    send(cmd) {
        this.worker.postMessage(cmd);
    }
}
class ThreadedWasmWorker extends AbstractWorker {
    boot() {
        if (!ThreadedWasmWorker.global)
            ThreadedWasmWorker.global = window.lichess.loadScript(this.url, { sameDomain: true }).then(() => {
                const instance = this.instance = window['Stockfish'](), protocol = new stockfishProtocol_1.default(this.send.bind(this), this.workerOpts), listener = protocol.received.bind(protocol);
                instance.addMessageListener(listener);
                return {
                    instance,
                    protocol
                };
            });
        return ThreadedWasmWorker.global.then(global => {
            this.instance = global.instance;
            return global.protocol;
        });
    }
    destroy() {
        if (ThreadedWasmWorker.global) {
            console.log('stopping singleton wasmx worker (instead of destroying) ...');
            this.stop().then(() => console.log('... successfully stopped'));
        }
    }
    send(cmd) {
        if (this.instance)
            this.instance.postMessage(cmd);
    }
}
class Pool {
    constructor(poolOpts, protocolOpts) {
        this.poolOpts = poolOpts;
        this.protocolOpts = protocolOpts;
        this.workers = [];
        this.token = 0;
        this.warmup = () => {
            if (this.workers.length)
                return;
            if (this.poolOpts.technology == 'wasmx')
                this.workers.push(new ThreadedWasmWorker(this.poolOpts.wasmx, this.poolOpts, this.protocolOpts));
            else {
                for (let i = 1; i <= 2; i++)
                    this.workers.push(new WebWorker(this.poolOpts.technology == 'wasm' ? this.poolOpts.wasm : this.poolOpts.asmjs, this.poolOpts, this.protocolOpts));
            }
        };
        this.stop = () => this.workers.forEach(w => w.stop());
        this.destroy = () => {
            this.stop();
            this.workers.forEach(w => w.destroy());
        };
        this.start = (work) => {
            window.lichess.storage.fire('ceval.pool.start');
            this.getWorker().then(function (worker) {
                worker.start(work);
            }).catch(function (error) {
                console.log(error);
                setTimeout(() => window.lichess.reload(), 10000);
            });
        };
        this.isComputing = () => !!this.workers.length && this.workers[this.token].isComputing();
        this.engineName = () => this.workers[this.token] && this.workers[this.token].engineName();
    }
    getWorker() {
        this.warmup();
        // briefly wait and give a chance to reuse the current worker
        const worker = new Promise((resolve, reject) => {
            const currentWorker = this.workers[this.token];
            currentWorker.stop().then(() => resolve(currentWorker));
            setTimeout(reject, 50);
        });
        return worker.catch(() => {
            this.token = (this.token + 1) % this.workers.length;
            return Promise.resolve(this.workers[this.token]);
        });
    }
}
exports.Pool = Pool;
//# sourceMappingURL=data:application/json;base64,