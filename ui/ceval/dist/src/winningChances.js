"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toPov(color, diff) {
    return color === 'white' ? diff : -diff;
}
/**
 * https://graphsketch.com/?eqn1_color=1&eqn1_eqn=100+*+%282+%2F+%281+%2B+exp%28-0.005+*+x%29%29+-+1%29&eqn2_color=2&eqn2_eqn=100+*+%282+%2F+%281+%2B+exp%28-0.004+*+x%29%29+-+1%29&eqn3_color=3&eqn3_eqn=&eqn4_color=4&eqn4_eqn=&eqn5_color=5&eqn5_eqn=&eqn6_color=6&eqn6_eqn=&x_min=-1000&x_max=1000&y_min=-100&y_max=100&x_tick=100&y_tick=10&x_label_freq=2&y_label_freq=2&do_grid=0&do_grid=1&bold_labeled_lines=0&bold_labeled_lines=1&line_width=4&image_w=850&image_h=525
 */
function rawWinningChances(cp) {
    return 2 / (1 + Math.exp(-0.004 * cp)) - 1;
}
function cpWinningChances(cp) {
    return rawWinningChances(Math.min(Math.max(-1000, cp), 1000));
}
function mateWinningChances(mate) {
    var cp = (21 - Math.min(10, Math.abs(mate))) * 100;
    var signed = cp * (mate > 0 ? 1 : -1);
    return rawWinningChances(signed);
}
function evalWinningChances(ev) {
    return typeof ev.mate !== 'undefined' ? mateWinningChances(ev.mate) : cpWinningChances(ev.cp);
}
// winning chances for a color
// 1  infinitely winning
// -1 infinitely losing
function povChances(color, ev) {
    return toPov(color, evalWinningChances(ev));
}
exports.povChances = povChances;
// computes the difference, in winning chances, between two evaluations
// 1  = e1 is infinately better than e2
// -1 = e1 is infinately worse  than e2
function povDiff(color, e1, e2) {
    return (povChances(color, e1) - povChances(color, e2)) / 2;
}
exports.povDiff = povDiff;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lubmluZ0NoYW5jZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2lubmluZ0NoYW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxTQUFTLEtBQUssQ0FBQyxLQUFZLEVBQUUsSUFBWTtJQUN2QyxPQUFPLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDMUMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxpQkFBaUIsQ0FBQyxFQUFVO0lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsRUFBVTtJQUNsQyxPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLElBQVk7SUFDdEMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ25ELElBQUksTUFBTSxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxPQUFPLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLEVBQVE7SUFDbEMsT0FBTyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUMsQ0FBQztBQUNqRyxDQUFDO0FBRUQsOEJBQThCO0FBQzlCLHdCQUF3QjtBQUN4Qix1QkFBdUI7QUFDdkIsU0FBZ0IsVUFBVSxDQUFDLEtBQVksRUFBRSxFQUFRO0lBQy9DLE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUM7QUFGRCxnQ0FFQztBQUVELHVFQUF1RTtBQUN2RSx1Q0FBdUM7QUFDdkMsdUNBQXVDO0FBQ3ZDLFNBQWdCLE9BQU8sQ0FBQyxLQUFZLEVBQUUsRUFBUSxFQUFFLEVBQVE7SUFDdEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRkQsMEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmFsIH0gZnJvbSAnLi90eXBlcyc7XG5cbmZ1bmN0aW9uIHRvUG92KGNvbG9yOiBDb2xvciwgZGlmZjogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIGNvbG9yID09PSAnd2hpdGUnID8gZGlmZiA6IC1kaWZmO1xufVxuXG4vKipcbiAqIGh0dHBzOi8vZ3JhcGhza2V0Y2guY29tLz9lcW4xX2NvbG9yPTEmZXFuMV9lcW49MTAwKyorJTI4MislMkYrJTI4MSslMkIrZXhwJTI4LTAuMDA1KyoreCUyOSUyOSstKzElMjkmZXFuMl9jb2xvcj0yJmVxbjJfZXFuPTEwMCsqKyUyODIrJTJGKyUyODErJTJCK2V4cCUyOC0wLjAwNCsqK3glMjklMjkrLSsxJTI5JmVxbjNfY29sb3I9MyZlcW4zX2Vxbj0mZXFuNF9jb2xvcj00JmVxbjRfZXFuPSZlcW41X2NvbG9yPTUmZXFuNV9lcW49JmVxbjZfY29sb3I9NiZlcW42X2Vxbj0meF9taW49LTEwMDAmeF9tYXg9MTAwMCZ5X21pbj0tMTAwJnlfbWF4PTEwMCZ4X3RpY2s9MTAwJnlfdGljaz0xMCZ4X2xhYmVsX2ZyZXE9MiZ5X2xhYmVsX2ZyZXE9MiZkb19ncmlkPTAmZG9fZ3JpZD0xJmJvbGRfbGFiZWxlZF9saW5lcz0wJmJvbGRfbGFiZWxlZF9saW5lcz0xJmxpbmVfd2lkdGg9NCZpbWFnZV93PTg1MCZpbWFnZV9oPTUyNVxuICovXG5mdW5jdGlvbiByYXdXaW5uaW5nQ2hhbmNlcyhjcDogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIDIgLyAoMSArIE1hdGguZXhwKC0wLjAwNCAqIGNwKSkgLSAxO1xufVxuXG5mdW5jdGlvbiBjcFdpbm5pbmdDaGFuY2VzKGNwOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gcmF3V2lubmluZ0NoYW5jZXMoTWF0aC5taW4oTWF0aC5tYXgoLTEwMDAsIGNwKSwgMTAwMCkpO1xufVxuXG5mdW5jdGlvbiBtYXRlV2lubmluZ0NoYW5jZXMobWF0ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgdmFyIGNwID0gKDIxIC0gTWF0aC5taW4oMTAsIE1hdGguYWJzKG1hdGUpKSkgKiAxMDA7XG4gIHZhciBzaWduZWQgPSBjcCAqIChtYXRlID4gMCA/IDEgOiAtMSk7XG4gIHJldHVybiByYXdXaW5uaW5nQ2hhbmNlcyhzaWduZWQpO1xufVxuXG5mdW5jdGlvbiBldmFsV2lubmluZ0NoYW5jZXMoZXY6IEV2YWwpOiBudW1iZXIge1xuICByZXR1cm4gdHlwZW9mIGV2Lm1hdGUgIT09ICd1bmRlZmluZWQnID8gbWF0ZVdpbm5pbmdDaGFuY2VzKGV2Lm1hdGUpIDogY3BXaW5uaW5nQ2hhbmNlcyhldi5jcCEpO1xufVxuXG4vLyB3aW5uaW5nIGNoYW5jZXMgZm9yIGEgY29sb3Jcbi8vIDEgIGluZmluaXRlbHkgd2lubmluZ1xuLy8gLTEgaW5maW5pdGVseSBsb3NpbmdcbmV4cG9ydCBmdW5jdGlvbiBwb3ZDaGFuY2VzKGNvbG9yOiBDb2xvciwgZXY6IEV2YWwpIHtcbiAgcmV0dXJuIHRvUG92KGNvbG9yLCBldmFsV2lubmluZ0NoYW5jZXMoZXYpKTtcbn1cblxuLy8gY29tcHV0ZXMgdGhlIGRpZmZlcmVuY2UsIGluIHdpbm5pbmcgY2hhbmNlcywgYmV0d2VlbiB0d28gZXZhbHVhdGlvbnNcbi8vIDEgID0gZTEgaXMgaW5maW5hdGVseSBiZXR0ZXIgdGhhbiBlMlxuLy8gLTEgPSBlMSBpcyBpbmZpbmF0ZWx5IHdvcnNlICB0aGFuIGUyXG5leHBvcnQgZnVuY3Rpb24gcG92RGlmZihjb2xvcjogQ29sb3IsIGUxOiBFdmFsLCBlMjogRXZhbCkge1xuICByZXR1cm4gKHBvdkNoYW5jZXMoY29sb3IsIGUxKSAtIHBvdkNoYW5jZXMoY29sb3IsIGUyKSkgLyAyO1xufVxuIl19