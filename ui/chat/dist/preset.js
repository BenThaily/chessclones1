"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const snabbdom_1 = require("snabbdom");
const util_1 = require("./util");
const groups = {
    start: [
        'hi/Hello', 'gl/Good luck', 'hf/Have fun!', 'u2/You too!'
    ].map(splitIt),
    end: [
        'gg/Good game', 'wp/Well played', 'ty/Thank you', 'gtg/I\'ve got to go', 'bye/Bye!'
    ].map(splitIt)
};
function presetCtrl(opts) {
    let group = opts.initialGroup;
    let said = [];
    return {
        group: () => group,
        said: () => said,
        setGroup(p) {
            if (p !== group) {
                group = p;
                if (!p)
                    said = [];
                opts.redraw();
            }
        },
        post(preset) {
            if (!group)
                return;
            const sets = groups[group];
            if (!sets)
                return;
            if (said.includes(preset.key))
                return;
            opts.post(preset.text);
            said.push(preset.key);
        }
    };
}
exports.presetCtrl = presetCtrl;
function presetView(ctrl) {
    const group = ctrl.group();
    if (!group)
        return;
    const sets = groups[group];
    const said = ctrl.said();
    return (sets && said.length < 2) ? snabbdom_1.h('div.mchat__presets', sets.map((p) => {
        const disabled = said.includes(p.key);
        return snabbdom_1.h('span', {
            class: {
                disabled
            },
            attrs: {
                title: p.text,
                disabled
            },
            hook: util_1.bind('click', () => { !disabled && ctrl.post(p); })
        }, p.key);
    })) : undefined;
}
exports.presetView = presetView;
function splitIt(s) {
    const parts = s.split('/');
    return {
        key: parts[0],
        text: parts[1]
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3ByZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUE0QjtBQUU1QixpQ0FBNkI7QUE4QjdCLE1BQU0sTUFBTSxHQUFpQjtJQUMzQixLQUFLLEVBQUU7UUFDTCxVQUFVLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxhQUFhO0tBQzFELENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztJQUNkLEdBQUcsRUFBRTtRQUNILGNBQWMsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQUUsVUFBVTtLQUNwRixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7Q0FDZixDQUFBO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQWdCO0lBRXpDLElBQUksS0FBSyxHQUF1QixJQUFJLENBQUMsWUFBWSxDQUFDO0lBRWxELElBQUksSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUV4QixPQUFPO1FBQ0wsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUs7UUFDbEIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUk7UUFDaEIsUUFBUSxDQUFDLENBQXFCO1lBQzVCLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRTtnQkFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxDQUFDO29CQUFFLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNO1lBQ1QsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsT0FBTztZQUNuQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLElBQUk7Z0JBQUUsT0FBTztZQUNsQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFBRSxPQUFPO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQXpCRCxnQ0F5QkM7QUFFRCxTQUFnQixVQUFVLENBQUMsSUFBZ0I7SUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLElBQUksQ0FBQyxLQUFLO1FBQUUsT0FBTztJQUNuQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBQyxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRTtRQUNoRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxPQUFPLFlBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDZixLQUFLLEVBQUU7Z0JBQ0wsUUFBUTthQUNUO1lBQ0QsS0FBSyxFQUFFO2dCQUNMLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSTtnQkFDYixRQUFRO2FBQ1Q7WUFDRCxJQUFJLEVBQUUsV0FBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDO1NBQ3pELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2xCLENBQUM7QUFsQkQsZ0NBa0JDO0FBRUQsU0FBUyxPQUFPLENBQUMsQ0FBUztJQUN4QixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLE9BQU87UUFDTCxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ2YsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAnc25hYmJkb20nXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3NuYWJiZG9tL3Zub2RlJ1xuaW1wb3J0IHsgYmluZCB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCB7IFJlZHJhdyB9IGZyb20gJy4vaW50ZXJmYWNlcydcblxuZXhwb3J0IGludGVyZmFjZSBQcmVzZXRDdHJsIHtcbiAgZ3JvdXAoKTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHNhaWQoKTogc3RyaW5nW11cbiAgc2V0R3JvdXAoZ3JvdXA6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHZvaWRcbiAgcG9zdChwcmVzZXQ6IFByZXNldCk6IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgUHJlc2V0S2V5ID0gc3RyaW5nXG5leHBvcnQgdHlwZSBQcmVzZXRUZXh0ID0gc3RyaW5nXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2V0IHtcbiAga2V5OiBQcmVzZXRLZXlcbiAgdGV4dDogUHJlc2V0VGV4dFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXNldEdyb3VwcyB7XG4gIHN0YXJ0OiBQcmVzZXRbXVxuICBlbmQ6IFByZXNldFtdXG4gIFtrZXk6IHN0cmluZ106IFByZXNldFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJlc2V0T3B0cyB7XG4gIGluaXRpYWxHcm91cD86IHN0cmluZ1xuICByZWRyYXc6IFJlZHJhd1xuICBwb3N0KHRleHQ6IHN0cmluZyk6IHZvaWRcbn1cblxuY29uc3QgZ3JvdXBzOiBQcmVzZXRHcm91cHMgPSB7XG4gIHN0YXJ0OiBbXG4gICAgJ2hpL0hlbGxvJywgJ2dsL0dvb2QgbHVjaycsICdoZi9IYXZlIGZ1biEnLCAndTIvWW91IHRvbyEnXG4gIF0ubWFwKHNwbGl0SXQpLFxuICBlbmQ6IFtcbiAgICAnZ2cvR29vZCBnYW1lJywgJ3dwL1dlbGwgcGxheWVkJywgJ3R5L1RoYW5rIHlvdScsICdndGcvSVxcJ3ZlIGdvdCB0byBnbycsICdieWUvQnllISdcbiAgXS5tYXAoc3BsaXRJdClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXNldEN0cmwob3B0czogUHJlc2V0T3B0cyk6IFByZXNldEN0cmwge1xuXG4gIGxldCBncm91cDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0cy5pbml0aWFsR3JvdXA7XG5cbiAgbGV0IHNhaWQ6IHN0cmluZ1tdID0gW107XG5cbiAgcmV0dXJuIHtcbiAgICBncm91cDogKCkgPT4gZ3JvdXAsXG4gICAgc2FpZDogKCkgPT4gc2FpZCxcbiAgICBzZXRHcm91cChwOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChwICE9PSBncm91cCkge1xuICAgICAgICBncm91cCA9IHA7XG4gICAgICAgIGlmICghcCkgc2FpZCA9IFtdO1xuICAgICAgICBvcHRzLnJlZHJhdygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9zdChwcmVzZXQpIHtcbiAgICAgIGlmICghZ3JvdXApIHJldHVybjtcbiAgICAgIGNvbnN0IHNldHMgPSBncm91cHNbZ3JvdXBdO1xuICAgICAgaWYgKCFzZXRzKSByZXR1cm47XG4gICAgICBpZiAoc2FpZC5pbmNsdWRlcyhwcmVzZXQua2V5KSkgcmV0dXJuO1xuICAgICAgb3B0cy5wb3N0KHByZXNldC50ZXh0KTtcbiAgICAgIHNhaWQucHVzaChwcmVzZXQua2V5KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXNldFZpZXcoY3RybDogUHJlc2V0Q3RybCk6IFZOb2RlIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgZ3JvdXAgPSBjdHJsLmdyb3VwKCk7XG4gIGlmICghZ3JvdXApIHJldHVybjtcbiAgY29uc3Qgc2V0cyA9IGdyb3Vwc1tncm91cF07XG4gIGNvbnN0IHNhaWQgPSBjdHJsLnNhaWQoKTtcbiAgcmV0dXJuIChzZXRzICYmIHNhaWQubGVuZ3RoIDwgMikgPyBoKCdkaXYubWNoYXRfX3ByZXNldHMnLCBzZXRzLm1hcCgocDogUHJlc2V0KSA9PiB7XG4gICAgY29uc3QgZGlzYWJsZWQgPSBzYWlkLmluY2x1ZGVzKHAua2V5KTtcbiAgICByZXR1cm4gaCgnc3BhbicsIHtcbiAgICAgIGNsYXNzOiB7XG4gICAgICAgIGRpc2FibGVkXG4gICAgICB9LFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgdGl0bGU6IHAudGV4dCxcbiAgICAgICAgZGlzYWJsZWRcbiAgICAgIH0sXG4gICAgICBob29rOiBiaW5kKCdjbGljaycsICgpID0+IHsgIWRpc2FibGVkICYmIGN0cmwucG9zdChwKSB9KVxuICAgIH0sIHAua2V5KTtcbiAgfSkpIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzcGxpdEl0KHM6IHN0cmluZyk6IFByZXNldCB7XG4gIGNvbnN0IHBhcnRzID0gcy5zcGxpdCgnLycpO1xuICByZXR1cm4ge1xuICAgIGtleTogcGFydHNbMF0sXG4gICAgdGV4dDogcGFydHNbMV1cbiAgfVxufVxuIl19