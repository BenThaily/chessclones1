"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const preset_1 = require("./preset");
const note_1 = require("./note");
const moderation_1 = require("./moderation");
const common_1 = require("common");
const li = window.lichess;
function default_1(opts, redraw) {
    const data = opts.data;
    data.domVersion = 1; // increment to force redraw
    const maxLines = 200;
    const maxLinesDrop = 50; // how many lines to drop at once
    const palantir = {
        instance: undefined,
        loaded: false,
        enabled: common_1.prop(!!data.palantir)
    };
    const allTabs = ['discussion'];
    if (opts.noteId)
        allTabs.push('note');
    if (opts.plugin)
        allTabs.push(opts.plugin.tab.key);
    const tabStorage = li.storage.make('chat.tab'), storedTab = tabStorage.get();
    let moderation;
    const vm = {
        tab: allTabs.find(tab => tab === storedTab) || allTabs[0],
        enabled: opts.alwaysEnabled || !li.storage.get('nochat'),
        placeholderKey: 'talkInChat',
        loading: false,
        timeout: opts.timeout,
        writeable: opts.writeable
    };
    /* If discussion is disabled, and we have another chat tab,
     * then select that tab over discussion */
    if (allTabs.length > 1 && vm.tab === 'discussion' && li.storage.get('nochat'))
        vm.tab = allTabs[1];
    const post = function (text) {
        text = text.trim();
        if (!text)
            return;
        if (text.length > 140) {
            alert('Max length: 140 chars. ' + text.length + ' chars used.');
            return;
        }
        li.pubsub.emit('socket.send', 'talk', text);
    };
    const onTimeout = function (userId) {
        data.lines.forEach(l => {
            if (l.u && l.u.toLowerCase() == userId)
                l.d = true;
        });
        if (userId == data.userId)
            vm.timeout = true;
        data.domVersion++;
        redraw();
    };
    const onReinstate = function (userId) {
        if (userId == data.userId) {
            vm.timeout = false;
            redraw();
        }
    };
    const onMessage = function (line) {
        data.lines.push(line);
        const nb = data.lines.length;
        if (nb > maxLines) {
            data.lines.splice(0, nb - maxLines + maxLinesDrop);
            data.domVersion++;
        }
        redraw();
    };
    const onWriteable = function (v) {
        vm.writeable = v;
        redraw();
    };
    const onPermissions = function (obj) {
        let p;
        for (p in obj)
            opts.permissions[p] = obj[p];
        instanciateModeration();
        redraw();
    };
    const trans = li.trans(opts.i18n);
    function canMod() {
        return opts.permissions.timeout || opts.permissions.local;
    }
    function instanciateModeration() {
        moderation = canMod() ? moderation_1.moderationCtrl({
            reasons: opts.timeoutReasons || ([{ key: 'other', name: 'Inappropriate behavior' }]),
            permissions: opts.permissions,
            redraw
        }) : undefined;
        if (canMod())
            opts.loadCss('chat.mod');
    }
    instanciateModeration();
    const note = opts.noteId ? note_1.noteCtrl({
        id: opts.noteId,
        trans,
        redraw
    }) : undefined;
    const preset = preset_1.presetCtrl({
        initialGroup: opts.preset,
        post,
        redraw
    });
    const subs = [
        ['socket.in.message', onMessage],
        ['socket.in.chat_timeout', onTimeout],
        ['socket.in.chat_reinstate', onReinstate],
        ['chat.writeable', onWriteable],
        ['chat.permissions', onPermissions],
        ['palantir.toggle', palantir.enabled]
    ];
    subs.forEach(([eventName, callback]) => li.pubsub.on(eventName, callback));
    const destroy = () => {
        subs.forEach(([eventName, callback]) => li.pubsub.off(eventName, callback));
    };
    const emitEnabled = () => li.pubsub.emit('chat.enabled', vm.enabled);
    emitEnabled();
    return {
        data,
        opts,
        vm,
        allTabs,
        setTab(t) {
            vm.tab = t;
            tabStorage.set(t);
            // It's a lame way to do it. Give me a break.
            if (t === 'discussion')
                li.requestIdleCallback(() => $('.mchat__say').focus());
            redraw();
        },
        moderation: () => moderation,
        note,
        preset,
        post,
        trans,
        plugin: opts.plugin,
        setEnabled(v) {
            vm.enabled = v;
            emitEnabled();
            if (!v)
                li.storage.set('nochat', '1');
            else
                li.storage.remove('nochat');
            redraw();
        },
        redraw,
        palantir,
        destroy
    };
}
exports.default = default_1;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3RybC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jdHJsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQXFDO0FBQ3JDLGlDQUFpQztBQUNqQyw2Q0FBNkM7QUFDN0MsbUNBQThCO0FBRTlCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFFMUIsbUJBQXdCLElBQWMsRUFBRSxNQUFjO0lBRXBELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7SUFDakQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDO0lBQ3JCLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGlDQUFpQztJQUUxRCxNQUFNLFFBQVEsR0FBRztRQUNmLFFBQVEsRUFBRSxTQUFTO1FBQ25CLE1BQU0sRUFBRSxLQUFLO1FBQ2IsT0FBTyxFQUFFLGFBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUMvQixDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QyxJQUFJLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxJQUFJLElBQUksQ0FBQyxNQUFNO1FBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVuRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFDNUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUUvQixJQUFJLFVBQXNDLENBQUM7SUFFM0MsTUFBTSxFQUFFLEdBQWM7UUFDcEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxD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QyxVQUFVO1FBQzVCLElBQUk7UUFDSixNQUFNO1FBQ04sSUFBSTtRQUNKLEtBQUs7UUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07UUFDbkIsVUFBVSxDQUFDLENBQVU7WUFDbkIsRUFBRSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDZixXQUFXLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxDQUFDO2dCQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQzs7Z0JBQ2pDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUNELE1BQU07UUFDTixRQUFRO1FBQ1IsT0FBTztLQUNSLENBQUM7QUFDSixDQUFDO0FBN0pELDRCQTZKQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdHJsLCBDaGF0T3B0cywgTGluZSwgVGFiLCBWaWV3TW9kZWwsIFJlZHJhdywgUGVybWlzc2lvbnMsIE1vZGVyYXRpb25DdHJsIH0gZnJvbSAnLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IHsgcHJlc2V0Q3RybCB9IGZyb20gJy4vcHJlc2V0J1xuaW1wb3J0IHsgbm90ZUN0cmwgfSBmcm9tICcuL25vdGUnXG5pbXBvcnQgeyBtb2RlcmF0aW9uQ3RybCB9IGZyb20gJy4vbW9kZXJhdGlvbidcbmltcG9ydCB7IHByb3AgfSBmcm9tICdjb21tb24nO1xuXG5jb25zdCBsaSA9IHdpbmRvdy5saWNoZXNzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvcHRzOiBDaGF0T3B0cywgcmVkcmF3OiBSZWRyYXcpOiBDdHJsIHtcblxuICBjb25zdCBkYXRhID0gb3B0cy5kYXRhO1xuICBkYXRhLmRvbVZlcnNpb24gPSAxOyAvLyBpbmNyZW1lbnQgdG8gZm9yY2UgcmVkcmF3XG4gIGNvbnN0IG1heExpbmVzID0gMjAwO1xuICBjb25zdCBtYXhMaW5lc0Ryb3AgPSA1MDsgLy8gaG93IG1hbnkgbGluZXMgdG8gZHJvcCBhdCBvbmNlXG5cbiAgY29uc3QgcGFsYW50aXIgPSB7XG4gICAgaW5zdGFuY2U6IHVuZGVmaW5lZCxcbiAgICBsb2FkZWQ6IGZhbHNlLFxuICAgIGVuYWJsZWQ6IHByb3AoISFkYXRhLnBhbGFudGlyKVxuICB9O1xuXG4gIGNvbnN0IGFsbFRhYnM6IFRhYltdID0gWydkaXNjdXNzaW9uJ107XG4gIGlmIChvcHRzLm5vdGVJZCkgYWxsVGFicy5wdXNoKCdub3RlJyk7XG4gIGlmIChvcHRzLnBsdWdpbikgYWxsVGFicy5wdXNoKG9wdHMucGx1Z2luLnRhYi5rZXkpO1xuXG4gIGNvbnN0IHRhYlN0b3JhZ2UgPSBsaS5zdG9yYWdlLm1ha2UoJ2NoYXQudGFiJyksXG4gICAgc3RvcmVkVGFiID0gdGFiU3RvcmFnZS5nZXQoKTtcblxuICBsZXQgbW9kZXJhdGlvbjogTW9kZXJhdGlvbkN0cmwgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3Qgdm06IFZpZXdNb2RlbCA9IHtcbiAgICB0YWI6IGFsbFRhYnMuZmluZCh0YWIgPT4gdGFiID09PSBzdG9yZWRUYWIpIHx8IGFsbFRhYnNbMF0sXG4gICAgZW5hYmxlZDogb3B0cy5hbHdheXNFbmFibGVkIHx8ICFsaS5zdG9yYWdlLmdldCgnbm9jaGF0JyksXG4gICAgcGxhY2Vob2xkZXJLZXk6ICd0YWxrSW5DaGF0JyxcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICB0aW1lb3V0OiBvcHRzLnRpbWVvdXQsXG4gICAgd3JpdGVhYmxlOiBvcHRzLndyaXRlYWJsZVxuICB9O1xuXG4gIC8qIElmIGRpc2N1c3Npb24gaXMgZGlzYWJsZWQsIGFuZCB3ZSBoYXZlIGFub3RoZXIgY2hhdCB0YWIsXG4gICAqIHRoZW4gc2VsZWN0IHRoYXQgdGFiIG92ZXIgZGlzY3Vzc2lvbiAqL1xuICBpZiAoYWxsVGFicy5sZW5ndGggPiAxICYmIHZtLnRhYiA9PT0gJ2Rpc2N1c3Npb24nICYmIGxpLnN0b3JhZ2UuZ2V0KCdub2NoYXQnKSkgdm0udGFiID0gYWxsVGFic1sxXTtcblxuICBjb25zdCBwb3N0ID0gZnVuY3Rpb24odGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGV4dCA9IHRleHQudHJpbSgpO1xuICAgIGlmICghdGV4dCkgcmV0dXJuO1xuICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDE0MCkge1xuICAgICAgYWxlcnQoJ01heCBsZW5ndGg6IDE0MCBjaGFycy4gJyArIHRleHQubGVuZ3RoICsgJyBjaGFycyB1c2VkLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaS5wdWJzdWIuZW1pdCgnc29ja2V0LnNlbmQnLCAndGFsaycsIHRleHQpO1xuICB9O1xuXG4gIGNvbnN0IG9uVGltZW91dCA9IGZ1bmN0aW9uKHVzZXJJZDogc3RyaW5nKSB7XG4gICAgZGF0YS5saW5lcy5mb3JFYWNoKGwgPT4ge1xuICAgICAgaWYgKGwudSAmJiBsLnUudG9Mb3dlckNhc2UoKSA9PSB1c2VySWQpIGwuZCA9IHRydWU7XG4gICAgfSk7XG4gICAgaWYgKHVzZXJJZCA9PSBkYXRhLnVzZXJJZCkgdm0udGltZW91dCA9IHRydWU7XG4gICAgZGF0YS5kb21WZXJzaW9uKys7XG4gICAgcmVkcmF3KCk7XG4gIH07XG5cbiAgY29uc3Qgb25SZWluc3RhdGUgPSBmdW5jdGlvbih1c2VySWQ6IHN0cmluZykge1xuICAgIGlmICh1c2VySWQgPT0gZGF0YS51c2VySWQpIHtcbiAgICAgIHZtLnRpbWVvdXQgPSBmYWxzZTtcbiAgICAgIHJlZHJhdygpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbk1lc3NhZ2UgPSBmdW5jdGlvbihsaW5lOiBMaW5lKSB7XG4gICAgZGF0YS5saW5lcy5wdXNoKGxpbmUpO1xuICAgIGNvbnN0IG5iID0gZGF0YS5saW5lcy5sZW5ndGg7XG4gICAgaWYgKG5iID4gbWF4TGluZXMpIHtcbiAgICAgIGRhdGEubGluZXMuc3BsaWNlKDAsIG5iIC0gbWF4TGluZXMgKyBtYXhMaW5lc0Ryb3ApO1xuICAgICAgZGF0YS5kb21WZXJzaW9uKys7XG4gICAgfVxuICAgIHJlZHJhdygpO1xuICB9O1xuXG4gIGNvbnN0IG9uV3JpdGVhYmxlID0gZnVuY3Rpb24odjogYm9vbGVhbikge1xuICAgIHZtLndyaXRlYWJsZSA9IHY7XG4gICAgcmVkcmF3KCk7XG4gIH1cblxuICBjb25zdCBvblBlcm1pc3Npb25zID0gZnVuY3Rpb24ob2JqOiBQZXJtaXNzaW9ucykge1xuICAgIGxldCBwOiBrZXlvZiBQZXJtaXNzaW9ucztcbiAgICBmb3IgKHAgaW4gb2JqKSBvcHRzLnBlcm1pc3Npb25zW3BdID0gb2JqW3BdO1xuICAgIGluc3RhbmNpYXRlTW9kZXJhdGlvbigpO1xuICAgIHJlZHJhdygpO1xuICB9XG5cbiAgY29uc3QgdHJhbnMgPSBsaS50cmFucyhvcHRzLmkxOG4pO1xuXG4gIGZ1bmN0aW9uIGNhbk1vZCgpIHtcbiAgICByZXR1cm4gb3B0cy5wZXJtaXNzaW9ucy50aW1lb3V0IHx8IG9wdHMucGVybWlzc2lvbnMubG9jYWw7XG4gIH1cblxuICBmdW5jdGlvbiBpbnN0YW5jaWF0ZU1vZGVyYXRpb24oKSB7XG4gICAgbW9kZXJhdGlvbiA9IGNhbk1vZCgpID8gbW9kZXJhdGlvbkN0cmwoe1xuICAgICAgcmVhc29uczogb3B0cy50aW1lb3V0UmVhc29ucyB8fCAoW3trZXk6ICdvdGhlcicsIG5hbWU6ICdJbmFwcHJvcHJpYXRlIGJlaGF2aW9yJ31dKSxcbiAgICAgIHBlcm1pc3Npb25zOiBvcHRzLnBlcm1pc3Npb25zLFxuICAgICAgcmVkcmF3XG4gICAgfSkgOiB1bmRlZmluZWQ7XG4gICAgaWYgKGNhbk1vZCgpKSBvcHRzLmxvYWRDc3MoJ2NoYXQubW9kJyk7XG4gIH1cbiAgaW5zdGFuY2lhdGVNb2RlcmF0aW9uKCk7XG5cbiAgY29uc3Qgbm90ZSA9IG9wdHMubm90ZUlkID8gbm90ZUN0cmwoe1xuICAgIGlkOiBvcHRzLm5vdGVJZCxcbiAgICB0cmFucyxcbiAgICByZWRyYXdcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgcHJlc2V0ID0gcHJlc2V0Q3RybCh7XG4gICAgaW5pdGlhbEdyb3VwOiBvcHRzLnByZXNldCxcbiAgICBwb3N0LFxuICAgIHJlZHJhd1xuICB9KTtcblxuICBjb25zdCBzdWJzOiBbc3RyaW5nLCBQdWJzdWJDYWxsYmFja11bXSAgPSBbXG4gICAgWydzb2NrZXQuaW4ubWVzc2FnZScsIG9uTWVzc2FnZV0sXG4gICAgWydzb2NrZXQuaW4uY2hhdF90aW1lb3V0Jywgb25UaW1lb3V0XSxcbiAgICBbJ3NvY2tldC5pbi5jaGF0X3JlaW5zdGF0ZScsIG9uUmVpbnN0YXRlXSxcbiAgICBbJ2NoYXQud3JpdGVhYmxlJywgb25Xcml0ZWFibGVdLFxuICAgIFsnY2hhdC5wZXJtaXNzaW9ucycsIG9uUGVybWlzc2lvbnNdLFxuICAgIFsncGFsYW50aXIudG9nZ2xlJywgcGFsYW50aXIuZW5hYmxlZF1cbiAgXTtcbiAgc3Vicy5mb3JFYWNoKChbZXZlbnROYW1lLCBjYWxsYmFja10pID0+IGxpLnB1YnN1Yi5vbihldmVudE5hbWUsIGNhbGxiYWNrKSk7XG5cbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBzdWJzLmZvckVhY2goKFtldmVudE5hbWUsIGNhbGxiYWNrXSkgPT4gbGkucHVic3ViLm9mZihldmVudE5hbWUsIGNhbGxiYWNrKSk7XG4gIH07XG5cbiAgY29uc3QgZW1pdEVuYWJsZWQgPSAoKSA9PiBsaS5wdWJzdWIuZW1pdCgnY2hhdC5lbmFibGVkJywgdm0uZW5hYmxlZCk7XG4gIGVtaXRFbmFibGVkKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhLFxuICAgIG9wdHMsXG4gICAgdm0sXG4gICAgYWxsVGFicyxcbiAgICBzZXRUYWIodDogVGFiKSB7XG4gICAgICB2bS50YWIgPSB0O1xuICAgICAgdGFiU3RvcmFnZS5zZXQodCk7XG4gICAgICAvLyBJdCdzIGEgbGFtZSB3YXkgdG8gZG8gaXQuIEdpdmUgbWUgYSBicmVhay5cbiAgICAgIGlmICh0ID09PSAnZGlzY3Vzc2lvbicpIGxpLnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4gJCgnLm1jaGF0X19zYXknKS5mb2N1cygpKTtcbiAgICAgIHJlZHJhdygpO1xuICAgIH0sXG4gICAgbW9kZXJhdGlvbjogKCkgPT4gbW9kZXJhdGlvbixcbiAgICBub3RlLFxuICAgIHByZXNldCxcbiAgICBwb3N0LFxuICAgIHRyYW5zLFxuICAgIHBsdWdpbjogb3B0cy5wbHVnaW4sXG4gICAgc2V0RW5hYmxlZCh2OiBib29sZWFuKSB7XG4gICAgICB2bS5lbmFibGVkID0gdjtcbiAgICAgIGVtaXRFbmFibGVkKCk7XG4gICAgICBpZiAoIXYpIGxpLnN0b3JhZ2Uuc2V0KCdub2NoYXQnLCAnMScpO1xuICAgICAgZWxzZSBsaS5zdG9yYWdlLnJlbW92ZSgnbm9jaGF0Jyk7XG4gICAgICByZWRyYXcoKTtcbiAgICB9LFxuICAgIHJlZHJhdyxcbiAgICBwYWxhbnRpcixcbiAgICBkZXN0cm95XG4gIH07XG59O1xuIl19