"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const snabbdom_1 = require("snabbdom");
const discussion_1 = require("./discussion");
const note_1 = require("./note");
const moderation_1 = require("./moderation");
const util_1 = require("./util");
function default_1(ctrl) {
    const mod = ctrl.moderation();
    return snabbdom_1.h('section.mchat' + (ctrl.opts.alwaysEnabled ? '' : '.mchat-optional'), {
        class: {
            'mchat-mod': !!mod
        },
        hook: {
            destroy: ctrl.destroy
        }
    }, moderation_1.moderationView(mod) || normalView(ctrl));
}
exports.default = default_1;
function renderPalantir(ctrl) {
    const p = ctrl.palantir;
    if (!p.enabled())
        return;
    return p.instance ? p.instance.render(snabbdom_1.h) : snabbdom_1.h('div.mchat__tab.palantir.palantir-slot', {
        attrs: {
            'data-icon': 'î€ ',
            title: 'Voice chat'
        },
        hook: util_1.bind('click', () => {
            if (!p.loaded) {
                p.loaded = true;
                const li = window.lichess;
                li.loadScript('javascripts/vendor/peerjs.min.js').then(() => {
                    li.loadScript(li.compiledScript('palantir')).then(() => {
                        p.instance = window.Palantir.palantir({
                            uid: ctrl.data.userId,
                            redraw: ctrl.redraw
                        });
                        ctrl.redraw();
                    });
                });
            }
        })
    });
}
function normalView(ctrl) {
    const active = ctrl.vm.tab;
    return [
        snabbdom_1.h('div.mchat__tabs.nb_' + ctrl.allTabs.length, [
            ...ctrl.allTabs.map(t => renderTab(ctrl, t, active)),
            renderPalantir(ctrl)
        ]),
        snabbdom_1.h('div.mchat__content.' + active, (active === 'note' && ctrl.note) ? [note_1.noteView(ctrl.note)] : (ctrl.plugin && active === ctrl.plugin.tab.key ? [ctrl.plugin.view()] : discussion_1.default(ctrl)))
    ];
}
function renderTab(ctrl, tab, active) {
    return snabbdom_1.h('div.mchat__tab.' + tab, {
        class: { 'mchat__tab-active': tab === active },
        hook: util_1.bind('click', () => ctrl.setTab(tab))
    }, tabName(ctrl, tab));
}
function tabName(ctrl, tab) {
    if (tab === 'discussion')
        return [
            snabbdom_1.h('span', ctrl.data.name),
            ctrl.opts.alwaysEnabled ? undefined : snabbdom_1.h('input', {
                attrs: {
                    type: 'checkbox',
                    title: ctrl.trans.noarg('toggleTheChat'),
                    checked: ctrl.vm.enabled
                },
                hook: util_1.bind('change', (e) => {
                    ctrl.setEnabled(e.target.checked);
                })
            })
        ];
    if (tab === 'note')
        return [snabbdom_1.h('span', ctrl.trans.noarg('notes'))];
    if (ctrl.plugin && tab === ctrl.plugin.tab.key)
        return [snabbdom_1.h('span', ctrl.plugin.tab.name)];
    return [];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy92aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQTRCO0FBRzVCLDZDQUF5QztBQUN6QyxpQ0FBaUM7QUFDakMsNkNBQTZDO0FBQzdDLGlDQUE2QjtBQUU3QixtQkFBd0IsSUFBVTtJQUVoQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFOUIsT0FBTyxZQUFDLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsRUFBRTtRQUM3RSxLQUFLLEVBQUU7WUFDTCxXQUFXLEVBQUUsQ0FBQyxDQUFDLEdBQUc7U0FDbkI7UUFDRCxJQUFJLEVBQUU7WUFDSixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEI7S0FDRixFQUFFLDJCQUFjLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDN0MsQ0FBQztBQVpELDRCQVlDO0FBRUQsU0FBUyxjQUFjLENBQUMsSUFBVTtJQUNoQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFO1FBQUUsT0FBTztJQUN6QixPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFDLENBQUMsdUNBQXVDLEVBQUM7UUFDbkYsS0FBSyxFQUFFO1lBQ0wsV0FBVyxFQUFFLEdBQUc7WUFDaEIsS0FBSyxFQUFFLFlBQVk7U0FDcEI7UUFDRCxJQUFJLEVBQUUsV0FBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ2hCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQzFCLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUMxRCxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO3dCQUNyRCxDQUFDLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFTLENBQUMsUUFBUSxDQUFDOzRCQUNyQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNOzRCQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07eUJBQ3BCLENBQUMsQ0FBQzt3QkFDSCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7b0JBQ2hCLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUM7S0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsSUFBVTtJQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUMzQixPQUFPO1FBQ0wsWUFBQyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzdDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRCxjQUFjLENBQUMsSUFBSSxDQUFDO1NBQ3JCLENBQUM7UUFDRixZQUFDLENBQUMscUJBQXFCLEdBQUcsTUFBTSxFQUM5QixDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDekQsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQWMsQ0FBQyxJQUFJLENBQUMsQ0FDNUYsQ0FBQztLQUNMLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBVSxFQUFFLEdBQVEsRUFBRSxNQUFXO0lBQ2xELE9BQU8sWUFBQyxDQUFDLGlCQUFpQixHQUFHLEdBQUcsRUFBRTtRQUNoQyxLQUFLLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxHQUFHLEtBQUssTUFBTSxFQUFFO1FBQzlDLElBQUksRUFBRSxXQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDNUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLElBQVUsRUFBRSxHQUFRO0lBQ25DLElBQUksR0FBRyxLQUFLLFlBQVk7UUFBRSxPQUFPO1lBQy9CLFlBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBQyxDQUFDLE9BQU8sRUFBRTtnQkFDL0MsS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxVQUFVO29CQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO29CQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPO2lCQUN6QjtnQkFDRCxJQUFJLEVBQUUsV0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQVEsRUFBRSxFQUFFO29CQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFFLENBQUMsQ0FBQyxNQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMxRCxDQUFDLENBQUM7YUFDSCxDQUFDO1NBQ0gsQ0FBQztJQUNGLElBQUksR0FBRyxLQUFLLE1BQU07UUFBRSxPQUFPLENBQUMsWUFBQyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1FBQUUsT0FBTyxDQUFDLFlBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6RixPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoIH0gZnJvbSAnc25hYmJkb20nXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3NuYWJiZG9tL3Zub2RlJ1xuaW1wb3J0IHsgQ3RybCwgVGFiIH0gZnJvbSAnLi9pbnRlcmZhY2VzJ1xuaW1wb3J0IGRpc2N1c3Npb25WaWV3IGZyb20gJy4vZGlzY3Vzc2lvbidcbmltcG9ydCB7IG5vdGVWaWV3IH0gZnJvbSAnLi9ub3RlJ1xuaW1wb3J0IHsgbW9kZXJhdGlvblZpZXcgfSBmcm9tICcuL21vZGVyYXRpb24nXG5pbXBvcnQgeyBiaW5kIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjdHJsOiBDdHJsKTogVk5vZGUge1xuXG4gIGNvbnN0IG1vZCA9IGN0cmwubW9kZXJhdGlvbigpO1xuXG4gIHJldHVybiBoKCdzZWN0aW9uLm1jaGF0JyArIChjdHJsLm9wdHMuYWx3YXlzRW5hYmxlZCA/ICcnIDogJy5tY2hhdC1vcHRpb25hbCcpLCB7XG4gICAgY2xhc3M6IHtcbiAgICAgICdtY2hhdC1tb2QnOiAhIW1vZFxuICAgIH0sXG4gICAgaG9vazoge1xuICAgICAgZGVzdHJveTogY3RybC5kZXN0cm95XG4gICAgfVxuICB9LCBtb2RlcmF0aW9uVmlldyhtb2QpIHx8IG5vcm1hbFZpZXcoY3RybCkpXG59XG5cbmZ1bmN0aW9uIHJlbmRlclBhbGFudGlyKGN0cmw6IEN0cmwpIHtcbiAgY29uc3QgcCA9IGN0cmwucGFsYW50aXI7XG4gIGlmICghcC5lbmFibGVkKCkpIHJldHVybjtcbiAgcmV0dXJuIHAuaW5zdGFuY2UgPyBwLmluc3RhbmNlLnJlbmRlcihoKSA6IGgoJ2Rpdi5tY2hhdF9fdGFiLnBhbGFudGlyLnBhbGFudGlyLXNsb3QnLHtcbiAgICBhdHRyczoge1xuICAgICAgJ2RhdGEtaWNvbic6ICfugKAnLFxuICAgICAgdGl0bGU6ICdWb2ljZSBjaGF0J1xuICAgIH0sXG4gICAgaG9vazogYmluZCgnY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoIXAubG9hZGVkKSB7XG4gICAgICAgIHAubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgbGkgPSB3aW5kb3cubGljaGVzcztcbiAgICAgICAgbGkubG9hZFNjcmlwdCgnamF2YXNjcmlwdHMvdmVuZG9yL3BlZXJqcy5taW4uanMnKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBsaS5sb2FkU2NyaXB0KGxpLmNvbXBpbGVkU2NyaXB0KCdwYWxhbnRpcicpKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHAuaW5zdGFuY2UgPSB3aW5kb3cuUGFsYW50aXIhLnBhbGFudGlyKHtcbiAgICAgICAgICAgICAgdWlkOiBjdHJsLmRhdGEudXNlcklkLFxuICAgICAgICAgICAgICByZWRyYXc6IGN0cmwucmVkcmF3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN0cmwucmVkcmF3KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBub3JtYWxWaWV3KGN0cmw6IEN0cmwpIHtcbiAgY29uc3QgYWN0aXZlID0gY3RybC52bS50YWI7XG4gIHJldHVybiBbXG4gICAgaCgnZGl2Lm1jaGF0X190YWJzLm5iXycgKyBjdHJsLmFsbFRhYnMubGVuZ3RoLCBbXG4gICAgICAuLi5jdHJsLmFsbFRhYnMubWFwKHQgPT4gcmVuZGVyVGFiKGN0cmwsIHQsIGFjdGl2ZSkpLFxuICAgICAgcmVuZGVyUGFsYW50aXIoY3RybClcbiAgICBdKSxcbiAgICBoKCdkaXYubWNoYXRfX2NvbnRlbnQuJyArIGFjdGl2ZSxcbiAgICAgIChhY3RpdmUgPT09ICdub3RlJyAmJiBjdHJsLm5vdGUpID8gW25vdGVWaWV3KGN0cmwubm90ZSldIDogKFxuICAgICAgICBjdHJsLnBsdWdpbiAmJiBhY3RpdmUgPT09IGN0cmwucGx1Z2luLnRhYi5rZXkgPyBbY3RybC5wbHVnaW4udmlldygpXSA6IGRpc2N1c3Npb25WaWV3KGN0cmwpXG4gICAgICApKVxuICBdXG59XG5cbmZ1bmN0aW9uIHJlbmRlclRhYihjdHJsOiBDdHJsLCB0YWI6IFRhYiwgYWN0aXZlOiBUYWIpIHtcbiAgcmV0dXJuIGgoJ2Rpdi5tY2hhdF9fdGFiLicgKyB0YWIsIHtcbiAgICBjbGFzczogeyAnbWNoYXRfX3RhYi1hY3RpdmUnOiB0YWIgPT09IGFjdGl2ZSB9LFxuICAgIGhvb2s6IGJpbmQoJ2NsaWNrJywgKCkgPT4gY3RybC5zZXRUYWIodGFiKSlcbiAgfSwgdGFiTmFtZShjdHJsLCB0YWIpKTtcbn1cblxuZnVuY3Rpb24gdGFiTmFtZShjdHJsOiBDdHJsLCB0YWI6IFRhYikge1xuICBpZiAodGFiID09PSAnZGlzY3Vzc2lvbicpIHJldHVybiBbXG4gICAgaCgnc3BhbicsIGN0cmwuZGF0YS5uYW1lKSxcbiAgICBjdHJsLm9wdHMuYWx3YXlzRW5hYmxlZCA/IHVuZGVmaW5lZCA6IGgoJ2lucHV0Jywge1xuICAgICAgYXR0cnM6IHtcbiAgICAgICAgdHlwZTogJ2NoZWNrYm94JyxcbiAgICAgICAgdGl0bGU6IGN0cmwudHJhbnMubm9hcmcoJ3RvZ2dsZVRoZUNoYXQnKSxcbiAgICAgICAgY2hlY2tlZDogY3RybC52bS5lbmFibGVkXG4gICAgICB9LFxuICAgICAgaG9vazogYmluZCgnY2hhbmdlJywgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGN0cmwuc2V0RW5hYmxlZCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZCk7XG4gICAgICB9KVxuICAgIH0pXG4gIF07XG4gIGlmICh0YWIgPT09ICdub3RlJykgcmV0dXJuIFtoKCdzcGFuJywgY3RybC50cmFucy5ub2FyZygnbm90ZXMnKSldO1xuICBpZiAoY3RybC5wbHVnaW4gJiYgdGFiID09PSBjdHJsLnBsdWdpbi50YWIua2V5KSByZXR1cm4gW2goJ3NwYW4nLCBjdHJsLnBsdWdpbi50YWIubmFtZSldO1xuICByZXR1cm4gW107XG59XG4iXX0=