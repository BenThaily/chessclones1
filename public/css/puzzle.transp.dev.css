/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
.puzzle__controls .fbt {
  text-shadow: 0.5px 1px 1px #000;
}

/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout accross pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
.piece-letter .tview2 move, .tview2 .piece-letter move, .piece-letter .pv_box .pv span, .pv_box .pv .piece-letter span, .tview2 glyph {
  font-family: 'Noto Sans';
}

.tview2 eval, .tview2 comment .by, .ceval .engine .cloud, .opening_box {
  font-family: 'Roboto';
}

.tview2 move, .pv_box .pv span {
  font-family: 'Noto Chess', 'Noto Sans';
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.puzzle__controls .fbt {
  color: #f7f7f7;
}

.cmn-toggle + label::after {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
}

.cmn-toggle:hover + label::after {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.45), rgba(0, 0, 0, 0.55) 100%);
}

.ceval {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
}

.fbt {
  background: none;
  border: none;
  outline: none;
  color: #cccccc;
}

.cmn-toggle:focus + label::before, .cmn-toggle:hover + label::before {
  box-shadow: 0 0 12px #b0b0b0;
}

.tview2 move, .ceval help,
.ceval .engine {
  white-space: nowrap;
  overflow: hidden;
}

.tview2 comment .by, .pv_box .pv, .opening_box {
  white-space: nowrap;
}

.tview2-column > interrupt > comment {
  overflow-wrap: break-word;
  word-break: break-word;
}

.tview2 comment .by, .pv_box .pv, .opening_box {
  overflow: hidden;
  text-overflow: ellipsis;
}

#promotion-choice {
  position: absolute;
  width: 100%;
  height: 100%;
}

.tview2-column {
  display: flex;
  flex-flow: row wrap;
}

.ceval .switch, .puzzle__side__metas .infos, .puzzle__controls, .puzzle__history > *, .puzzle__feedback.after .half-top, .puzzle__feedback.after .continue {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

.puzzle__tools, .puzzle__feedback {
  display: flex;
  flex-flow: column;
}

.puzzle__side__metas, .puzzle__tools, .puzzle__history, .puzzle__side__user, .tview2-inline move.active, .tview2-inline move:hover, .ceval .engine .cloud {
  border-radius: 3px;
}

.puzzle__side__metas, .puzzle__tools, .puzzle__history {
  overflow: hidden;
  /* helps with clipping background into border-radius */
}

.analyse-controls .fbt {
  border-radius: 0 0 3px 3px;
}

.puzzle__side__user, .puzzle__side__metas, .puzzle__tools {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

coords {
  /* handle hidden coords */
  /* handle inner coords */
  position: absolute;
  display: flex;
  pointer-events: none;
  user-select: none;
  color: #fff;
  text-shadow: 0 1px 2px #000;
  font-weight: bold;
  /* negate inner coords colors */
}

.coords-no coords {
  display: none;
}

coords {
  font-size: 8px;
}

@media (min-width: 320px) {
  coords {
    font-size: calc(8px + 4 * ((100vw - 320px) / 880));
  }
}

@media (min-width: 1200px) {
  coords {
    font-size: 12px;
  }
}

coords.ranks {
  flex-flow: column-reverse;
  top: 1px;
  right: 0;
  height: 100%;
  width: .8em;
}

coords.ranks.black {
  flex-flow: column;
}

coords.files {
  bottom: 0px;
  left: 0;
  text-align: left;
  flex-flow: row;
  width: 100%;
  height: 1.4em;
}

coords.files.black {
  flex-flow: row-reverse;
}

coords.files coord {
  padding-left: 4px;
}

coords coord {
  flex: 1 1 auto;
}

coords .is3d .cg-wrap coords coord {
  color: #fff !important;
  text-shadow: 0 1px 2px #000 !important;
}

coords .is3d .cg-wrap coords.files {
  bottom: calc(1px - 2.5%);
}

coords .is3d .cg-wrap coords.files coord {
  padding-left: 3px;
}

.blue coord {
  text-shadow: none;
}

.blue .orientation-white .files coords:nth-child(2n+1),
.blue .orientation-white .ranks coords:nth-child(2n),
.blue .orientation-black .files coords:nth-child(2n),
.blue .orientation-black .ranks coords:nth-child(2n+1) {
  color: #DEE3E6;
}

.blue .orientation-white .files coord:nth-child(2n),
.blue .orientation-white .ranks coord:nth-child(2n+1),
.blue .orientation-black .files coord:nth-child(2n+1),
.blue .orientation-black .ranks coord:nth-child(2n) {
  color: #788a94;
}

.brown coord {
  text-shadow: none;
}

.brown .orientation-white .files coord:nth-child(2n+1),
.brown .orientation-white .ranks coord:nth-child(2n),
.brown .orientation-black .files coord:nth-child(2n),
.brown .orientation-black .ranks coord:nth-child(2n+1) {
  color: #F0D9B5;
}

.brown .orientation-white .files coord:nth-child(2n),
.brown .orientation-white .ranks coord:nth-child(2n+1),
.brown .orientation-black .files coord:nth-child(2n+1),
.brown .orientation-black .ranks coord:nth-child(2n) {
  color: #946f51;
}

.green coord {
  text-shadow: none;
}

.green .orientation-white .files coords:nth-child(2n+1),
.green .orientation-white .ranks coords:nth-child(2n),
.green .orientation-black .files coords:nth-child(2n),
.green .orientation-black .ranks coords:nth-child(2n+1) {
  color: #FFFFDD;
}

.green .orientation-white .files coord:nth-child(2n),
.green .orientation-white .ranks coord:nth-child(2n+1),
.green .orientation-black .files coord:nth-child(2n+1),
.green .orientation-black .ranks coord:nth-child(2n) {
  color: #6d8753;
}

/* handle outer coords */
@media (min-width: 800px), (orientation: landscape) {
  .coords-out coords {
    text-shadow: none;
  }
  .coords-out coords.ranks {
    right: -15px;
    top: 0;
    width: 12px;
  }
  .coords-out coords.ranks coord {
    transform: translateY(42%);
  }
  .coords-out coords.files {
    bottom: -15px;
    left: 0;
    text-align: center;
  }
  .coords-out coords coord {
    color: #f7f7f7 !important;
  }
}

body {
  --board-scale: 1;
}

@media (min-width: 800px) and (min-height: 500px) {
  body {
    --board-scale: calc((var(--zoom) / 100) * 0.7 + 0.3);
  }
}

@media (max-width: 799px) and (orientation: portrait) {
  body {
    --col1: 1;
  }
  .main-board cg-board {
    border-radius: 0;
  }
}

body.resizing {
  user-select: none;
}

cg-resize {
  display: none;
}

@media (min-width: 800px) {
  cg-resize {
    display: block;
    position: absolute;
    right: -9px;
    bottom: -9px;
    width: 22px;
    height: 22px;
    cursor: nwse-resize;
  }
  cg-resize::before, cg-resize::after {
    background: #000;
    content: '';
    position: absolute;
    width: 12px;
    height: 1px;
  }
  cg-resize::before {
    width: 5px;
    transform: translate(7px, 8px) rotate(-45deg);
  }
  cg-resize::after {
    transform: translate(1px, 6px) rotate(-45deg);
  }
  cg-resize:hover {
    border-radius: 50%;
    background: rgba(214, 79, 0, 0.5);
  }
  .resizing cg-resize {
    border-radius: 50%;
    background: rgba(98, 153, 36, 0.5);
  }
}

.color-icon.white::before {
  content: "J";
}

.color-icon.black::before {
  content: "K";
}

.color-icon.random::before {
  content: "l";
}

.fbt {
  text-transform: uppercase;
  line-height: 1.5;
  transition: all 150ms;
}

@media (hover: hover) {
  .fbt:hover:not(.disabled):not([disabled]) {
    background: rgba(86, 134, 31, 0.9);
    color: #fff;
  }
}

.fbt.active {
  background: #629924 !important;
  color: #fff;
}

.fbt.disabled, .fbt[disabled] {
  opacity: 0.5;
  cursor: default;
}

.cmn-toggle {
  position: absolute;
  margin-left: -99999px;
}

.cmn-toggle + label {
  display: block;
  position: relative;
  cursor: pointer;
  outline: none;
  -webkit-user-select: none;
  -moz-user-select: none;
}

.cmn-toggle + label {
  padding: 1px;
  width: 40px;
  height: 24px;
  background-color: #404040;
  border-radius: 24px;
}

.cmn-toggle + label::before,
.cmn-toggle + label::after {
  display: block;
  position: absolute;
  top: 1px;
  left: 1px;
  bottom: 1px;
  content: "";
}

.cmn-toggle + label::before {
  right: 1px;
  background-color: #cc3333;
  border-radius: 24px;
}

.cmn-toggle--subtle + label::before {
  background-color: #7a7a7a;
}

.cmn-toggle:hover + label::before {
  transition: background 150ms;
}

.cmn-toggle + label::after {
  width: 22px;
  border-radius: 100%;
  box-shadow: 0 1px 2.5px rgba(0, 0, 0, 0.3);
}

.cmn-toggle:hover + label::after {
  transition: margin 150ms;
}

.cmn-toggle:checked + label::before {
  background-color: #629924;
}

.cmn-toggle:checked + label::after {
  margin-left: 16px;
}

body ::-webkit-scrollbar,
body ::-webkit-scrollbar-corner {
  width: .5rem;
  background: rgba(0, 0, 0, 0.6);
}

body ::-webkit-scrollbar-thumb {
  background: #4d4d4d;
}

body ::-webkit-scrollbar-thumb:hover,
body ::-webkit-scrollbar-thumb:active {
  background: #7a7a7a;
}

.tview2 move {
  display: inline-block;
  cursor: pointer;
}

.tview2 {
  white-space: normal;
}

.tview2-inline {
  padding: 7px 3px 7px 7px;
}

.tview2-column move {
  font-size: 1.092em;
  padding: 0 2px;
}

.tview2-inline move {
  padding: .25em .17em;
  white-space: nowrap;
  font-weight: bold;
}

.tview2 move.parent {
  color: #3692e7;
}

.tview2 comment a {
  vertical-align: top;
}

.tview2 move.current {
  border: 1px solid #d64f00;
}

.tview2 move.active {
  font-weight: bold;
  background: rgba(20, 54, 85, 0.68);
}

.tview2 move.nongame {
  font-style: italic;
}

.tview2 move:not(.empty):hover,
.tview2 move:not(.empty):hover index,
.tview2 move:not(.empty):hover eval {
  background: #3692e7;
  color: #fff;
}

.tview2 move.empty {
  color: #7a7a7a;
  cursor: default;
}

.tview2 move index {
  font-size: 90%;
  color: #b0b0b0;
}

.tview2 move.context-menu {
  background: #d64f00;
  color: #fff;
}

.tview2 move.context-menu index {
  color: #fff;
}

.tview2-column move index {
  padding-left: 5px;
}

.tview2-column move index:first-child {
  padding-left: 0;
}

.tview2-inline move index {
  padding-right: .2em;
  line-height: 111.11%;
}

.tview2 line move {
  color: #cccccc;
}

.tview2-column > move {
  flex: 0 0 43.5%;
  display: flex;
  font-size: 1.185em;
  line-height: 1.75em;
  padding: 0 .3em 0 .5em;
}

.tview2-column > index + move {
  border-right: #404040;
}

.tview2 eval {
  flex: 3 0 auto;
  text-align: right;
  font-size: .8em;
  color: #b0b0b0;
}

.tview2 glyph {
  margin-left: .08em;
  vertical-align: bottom;
}

.tview2-column > move glyph {
  flex: 0 1 auto;
  text-align: center;
  overflow: hidden;
  font-size: .82em;
}

.tview2-column > index {
  flex: 0 0 13%;
  display: flex;
  justify-content: center;
  border-right: 1px solid #404040;
  background: rgba(255, 255, 255, 0.05);
  line-height: 2.07em;
  color: #7a7a7a;
}

.tview2 > interrupt {
  font-size: 95%;
}

.tview2-column > interrupt {
  flex: 0 0 100%;
  background: rgba(255, 255, 255, 0.05);
  border-top: 1px solid #404040;
  border-bottom: 1px solid #404040;
  max-width: 100%;
}

.tview2-column > interrupt > comment {
  display: block;
  padding: 3px 5px;
}

.tview2-inline comment {
  vertical-align: 45%;
  word-wrap: break-word;
  margin: 0 .2em 0 .1em;
  font-size: .9em;
}

.tview2 comment .by {
  display: inline-block;
  vertical-align: -.3em;
  font-size: .9em;
  opacity: 0.8;
  margin-right: .4em;
  max-width: 9em;
}

.tview2-column comment.white {
  border-left: 3px solid;
}

.tview2-column comment.black {
  border-right: 3px solid;
  overflow-x: hidden;
}

.tview2-column comment.inaccuracy {
  border-color: #56B4E9;
}

.tview2-column comment.mistake {
  border-color: #E69F00;
}

.tview2-column comment.blunder {
  border-color: #DF5353;
}

.tview2-column comment.undefined {
  border-color: #66558C;
}

.tview2 line comment {
  font-size: 90%;
}

.tview2-column line comment {
  display: inline;
  color: #b0b0b0;
  word-wrap: break-word;
  padding: 0 5px 0 3px;
  vertical-align: top;
}

.tview2 line comment .by {
  font-size: 1em;
  vertical-align: top;
}

.tview2 lines {
  display: block;
  margin-top: 2px;
  margin-left: 6px;
  margin-bottom: .8em;
  border-left: 2px solid #404040;
}

.tview2 > interrupt > lines {
  margin-left: 0px;
}

.tview2 lines.single {
  border-left: none;
}

.tview2 lines:last-child {
  margin-bottom: 0;
}

.tview2 line {
  display: block;
  padding-left: 7px;
}

.tview2-column line {
  margin: 2px 0;
}

.tview2 lines lines move {
  font-size: 13px;
}

.tview2 lines lines {
  margin-left: 1px;
}

.tview2 lines lines::before {
  content: ' ';
  border-top: 2px solid #404040;
  position: absolute;
  margin-left: -11px;
  width: 9px;
  height: 6px;
}

.tview2 lines line::before {
  margin-top: .65em;
  margin-left: -8px;
  content: ' ';
  border-top: 2px solid #404040;
  position: absolute;
  width: 8px;
  height: 6px;
}

.tview2 lines lines:last-child {
  margin-bottom: 0;
}

.tview2 inline {
  display: inline;
  font-style: italic;
  font-size: .9em;
  opacity: 0.8;
}

.tview2 inline::before,
.tview2 inline::after {
  vertical-align: .4em;
  opacity: 0.7;
  font-size: .9em;
}

.tview2 inline::before {
  content: '(';
  margin-left: 2px;
}

.tview2 inline::after {
  content: ')';
  margin-right: 2px;
}

.tview2-inline inline::before,
.tview2-inline inline::after {
  vertical-align: .7em;
}

.tview2 .conceal {
  opacity: 0.4;
}

.tview2 .hide {
  display: none;
}

.ceval {
  position: relative;
  display: flex;
  align-items: stretch;
}

.ceval.enabled {
  padding-top: 2px;
  height: 40px;
}

.ceval .switch {
  flex: 0 0 40px;
  margin-right: 8px;
}

.ceval pearl {
  flex: 0 0 75px;
  line-height: 38px;
  font-size: 1.6em;
  text-align: center;
  font-weight: bold;
}

.ceval help,
.ceval .engine {
  flex: 1 1 auto;
  font-size: 12px;
  line-height: 16px;
  margin-top: 3px;
  color: #b0b0b0;
}

.ceval .engine .cloud {
  margin-left: 4px;
  background: #4f7a1d;
  color: #fff;
  padding: 1px 3px;
  text-transform: uppercase;
  font-size: 11px;
}

.ceval .engine .info {
  display: block;
  white-space: nowrap;
}

.ceval .engine .deeper {
  color: #3692e7;
  margin-left: 4px;
}

.ceval .engine .deeper::before {
  vertical-align: -2px;
}

.ceval .native {
  margin-left: 5px;
  text-transform: uppercase;
  color: #629924;
}

.ceval .asmjs {
  margin-left: 5px;
  text-transform: uppercase;
}

.ceval .bar {
  position: absolute;
  width: 100%;
  height: 3px;
  top: 0px;
}

@keyframes bar-anim {
  from {
    background-position: 0 0;
  }
  to {
    background-position: 100000px 0;
  }
}

.ceval .bar span {
  display: block;
  height: 3px;
  width: 0;
  background: #629924;
  transition: width 1s;
}

.ceval .bar span.threat {
  background: #cc3333;
}

.ceval.computing .bar span {
  background-image: url("../images/bar-highlight.png");
  animation: bar-anim 1000s linear infinite;
}

.ceval .show-threat {
  flex: 0 99 auto;
  line-height: 38px;
  color: #b0b0b0;
  font-size: .9em;
  padding-right: .5em;
  overflow: hidden;
}

.ceval .show-threat:hover:not(.hidden), .ceval .show-threat.active {
  color: #cc3333;
}

.ceval .show-threat.hidden {
  opacity: 0.3;
  cursor: default;
}

.pv_box {
  background: rgba(0, 0, 0, 0.6);
  font-size: 13px;
}

.pv_box .pv {
  height: 2em;
  line-height: 2em;
  border-top: 1px solid #404040;
}

.pv_box .pv[data-uci]:hover {
  background: rgba(36, 56, 13, 0.68);
  cursor: pointer;
}

.pv_box .pv strong {
  display: inline-block;
  width: 34px;
  text-align: center;
}

.pv_box .pv span {
  margin-left: 4px;
}

main {
  --gauge-gap: 8px;
}

@media (min-width: 320px) {
  main {
    --gauge-gap: calc(8px + 9 * ((100vw - 320px) / 880));
  }
}

@media (min-width: 1200px) {
  main {
    --gauge-gap: 17px;
  }
}

.eval-gauge {
  width: var(--gauge-gap);
  position: relative;
  background: #a0a0a0;
  overflow: hidden;
}

@media (max-width: 799px) and (orientation: portrait) {
  .eval-gauge {
    display: none;
  }
}

.eval-gauge.reverse {
  transform: rotateX(180deg);
}

.eval-gauge::after {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.7) inset;
}

.eval-gauge tick {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  border-bottom: 2px ridge #a0a0a0;
  opacity: 0.4;
}

.eval-gauge tick.zero {
  top: 6px;
  opacity: 1;
  border-bottom: 7px solid rgba(214, 79, 0, 0.4);
  margin-top: -3px;
}

.eval-gauge .black {
  width: 100%;
  height: 50%;
  background: #666;
  transition: height 1s;
}

.opening_box {
  padding: 5px;
  border-bottom: 1px solid #404040;
  background: rgba(255, 255, 255, 0.05);
}

.analyse-controls {
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  font-size: 1.3rem;
}

.analyse-controls .fbt {
  text-align: center;
}

.analyse-controls .hidden {
  visibility: hidden;
}

.analyse-controls .jumps {
  display: flex;
}

.analyse-controls .jumps .fbt {
  flex: 1 1 30%;
}

.analyse-controls .jumps .fbt:first-child, .analyse-controls .jumps .fbt:last-child {
  flex: 1 1 20%;
  font-size: .7em;
}

#promotion-choice {
  background: rgba(22, 21, 18, 0.7);
  z-index: 205;
}

#promotion-choice square {
  cursor: pointer;
  border-radius: 50%;
  background-color: #b0b0b0;
  box-shadow: inset 0 0 25px 3px #808080;
  transition: all 150ms;
}

#promotion-choice piece {
  pointer-events: auto;
  opacity: 1;
  /* cancels blindfold */
}

.is2d #promotion-choice piece {
  width: 100%;
  height: 100%;
  transition: all 150ms;
  transform: scale(0.8);
}

#promotion-choice square:hover {
  box-shadow: inset 0 0 48px 8px #d64f00;
  border-radius: 0%;
}

.is2d #promotion-choice square:hover piece {
  transform: none;
}

.blindfold.main-board piece,
.blindfold .now-playing piece {
  opacity: 0;
}

.blindfold.main-board .check {
  background: none;
}

#main-wrap {
  --main-max-width: calc(100vh - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem);
}

@media (min-width: 800px), (orientation: landscape) {
  #main-wrap {
    --main-max-width: auto;
  }
}

.puzzle {
  grid-area: main;
  display: grid;
  grid-template-areas: 'board' 'controls' 'tools' 'history' 'side';
  grid-row-gap: 2vmin;
}

.puzzle__side {
  grid-area: side;
}

.puzzle__board {
  grid-area: board;
}

.puzzle__tools {
  grid-area: tools;
}

.puzzle__controls {
  grid-area: controls;
}

.puzzle__history {
  grid-area: history;
}

.puzzle .eval-gauge {
  grid-area: gauge;
}

.puzzle__moves {
  display: none;
}

@media (min-width: 800px), (orientation: landscape) {
  .puzzle {
    grid-template-columns: minmax(calc(70vmin * var(--board-scale)), calc(100vh * var(--board-scale) - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) var(--gauge-gap) minmax(240px, 400px);
    grid-template-rows: fit-content(0);
    grid-template-areas: 'board   gauge tools' 'history .     controls' 'side    side  side';
  }
  .puzzle__moves {
    display: block;
  }
}

@media (min-width: 1260px) {
  .puzzle {
    grid-template-areas: 'side    . board   gauge tools' '.       . history .     controls';
    grid-template-columns: minmax(230px, 20vw) 2vmin minmax(calc(70vmin * var(--board-scale)), calc(100vh * var(--board-scale) - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) var(--gauge-gap) minmax(240px, 400px);
  }
}

.puzzle__side {
  display: grid;
  grid-template-areas: 'metas' 'user';
  grid-gap: 2vmin;
}

@media (min-width: 650px) {
  .puzzle__side {
    grid-template-columns: 1fr 1fr;
    grid-template-areas: 'metas user';
  }
}

@media (min-width: 1260px) {
  .puzzle__side {
    grid-template-columns: 1fr;
    grid-template-rows: min-content;
    grid-template-areas: 'metas' 'user';
    justify-self: end;
    min-width: 250px;
    max-width: 350px;
  }
}

.puzzle__side__metas {
  grid-area: metas;
}

.puzzle__side__user {
  grid-area: user;
}

.puzzle__side__metas {
  align-self: start;
  background: rgba(0, 0, 0, 0.6);
  padding: 2vmin;
}

.puzzle__side__metas .spinner {
  margin: 4rem auto;
}

.puzzle__side__metas p {
  margin: 0;
}

.puzzle__side__metas .infos {
  overflow: hidden;
}

.puzzle__side__metas .infos::before {
  font-size: 3rem;
  margin-right: 1vw;
}

.puzzle__side__metas .infos.puzzle {
  padding-bottom: 2vh;
  border-bottom: 1px solid #404040;
  margin-bottom: 2vh;
}

.puzzle__side__metas .infos.puzzle a {
  font-size: 1.2em;
}

.puzzle__side__metas .infos.puzzle .hidden {
  opacity: 0.7;
}

.puzzle__side__metas .infos .players {
  margin-top: .3rem;
  font-size: 90%;
}

.puzzle__side__user {
  align-self: start;
  background: rgba(0, 0, 0, 0.6);
}

.puzzle__side__user h2 {
  padding: 2vmin;
  font-size: 1.2rem;
}

.puzzle__side__user .rp {
  /* font-size: 1.2em; */
}

.puzzle__side__user .rp.up {
  color: #629924;
}

.puzzle__side__user .rp.down {
  color: #cc3333;
}

.puzzle__side__user canvas {
  width: 100%;
  opacity: .5;
}

#jqstooltip {
  box-sizing: content-box;
}

.puzzle__tools {
  max-height: 90vh;
  /* hack to mitigate safari 10 disaster */
  background: rgba(0, 0, 0, 0.6);
}

.puzzle__tools .ceval-wrap {
  flex: 0 0 38px;
}

.puzzle__tools .ceval {
  height: 38px;
}

.puzzle__moves {
  flex: 2 1 auto;
  overflow: auto;
  border: 1px solid #404040;
  border-width: 1px 0;
  position: relative;
  /* required by line::before */
}

.puzzle__moves .tview2 > move {
  justify-content: space-between;
}

.puzzle__moves .tview2 > move glyph {
  font-size: 1.6em;
}

.puzzle__moves move glyph {
  vertical-align: middle;
}

.puzzle__moves move.fail glyph {
  color: #cc3333;
}

.puzzle__moves move.good glyph,
.puzzle__moves move.win glyph {
  color: #629924;
}

.puzzle__moves move:hover glyph {
  color: #fff;
}

.puzzle__feedback {
  flex: 1 0 9rem;
  background: rgba(0, 0, 0, 0.6);
  justify-content: center;
}

@media (min-height: 600px) {
  .puzzle__feedback {
    flex: 1 0 11rem;
  }
}

.puzzle__feedback:not(.after) {
  padding: 1em 2em;
}

.puzzle__feedback .player {
  display: flex;
  align-items: center;
}

.puzzle__feedback .no-square {
  flex: 0 0 64px;
  height: 64px;
  margin-right: 10px;
}

.is3d .puzzle__feedback div.no-square {
  height: 82px;
}

.puzzle__feedback piece {
  position: inherit;
  display: block;
  width: 100%;
  height: 100%;
}

.puzzle__feedback .icon {
  display: block;
  width: 64px;
  height: 64px;
  font-size: 50px;
  line-height: 64px;
  text-align: center;
}

.puzzle__feedback.good .icon,
.puzzle__feedback .win .icon {
  color: #629924;
}

.puzzle__feedback.fail .icon {
  color: #cc3333;
}

.puzzle__feedback .instruction > * {
  display: block;
}

.puzzle__feedback .instruction strong {
  font-size: 1.5em;
}

@keyframes reveal {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 0.8;
  }
}

.puzzle__feedback .view_solution {
  margin-top: 1.5em;
  text-align: center;
  visibility: hidden;
}

.puzzle__feedback .view_solution.show {
  visibility: visible;
  animation: reveal 1.5s;
}

.puzzle__controls {
  height: 3rem;
  margin-top: -2vmin;
}

.puzzle__controls .jumps {
  flex: 1 1 auto;
}

.puzzle__history {
  height: 3rem;
  display: flex;
  justify-content: flex-end;
  background: #4d4d4d;
}

.puzzle__history > * {
  justify-content: center;
  color: #fff;
  flex: 0 0 12.5%;
}

@media (min-width: 800px) and (min-height: 500px) {
  .puzzle__history > * {
    flex: 0 0 10%;
  }
}

@media (min-width: 980px) and (min-height: 500px) {
  .puzzle__history > * {
    flex: 0 0 6.6667%;
  }
}

.puzzle__history a {
  transition: background 150ms;
}

.puzzle__history a:hover {
  color: #fff;
  opacity: 1;
}

.puzzle__history a.win {
  background: #5a7a34;
}

.puzzle__history a.win:hover {
  background: #629924;
}

.puzzle__history a.loss {
  background: #953e3e;
}

.puzzle__history a.loss:hover {
  background: #cc3333;
}

.puzzle__history a.current {
  background: #bf811d;
}

.puzzle__feedback.after .half {
  flex: 1 1 50%;
}

.puzzle__feedback.after .half-top {
  flex-flow: row nowrap;
}

.puzzle__feedback.after .complete {
  flex: 1 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.3em;
  border: none;
  white-space: nowrap;
}

.puzzle__feedback.after .complete.win {
  align-items: flex-start;
}

.puzzle__feedback.after .vote {
  display: flex;
  flex-flow: column;
  margin: 0 1em;
  align-items: center;
  justify-content: center;
}

.puzzle__feedback.after .vote a {
  cursor: default;
  cursor: pointer;
  opacity: 0.7;
}

.puzzle__feedback.after .vote a::before {
  font-size: 26px;
  line-height: 22px;
}

.puzzle__feedback.after .vote a:hover,
.puzzle__feedback.after .vote a.active {
  opacity: 1;
  color: #d64f00;
}

.puzzle__feedback.after .vote span.count {
  font-size: 15px;
  line-height: 1;
}

.puzzle__feedback.after .continue {
  justify-content: center;
  font-size: 1.3em;
  background: #3692e7;
  color: #fff;
  text-transform: uppercase;
  padding: 0 10px;
  order: -1;
}

@media (orientation: landscape) {
  .puzzle__feedback.after .continue {
    order: 0;
  }
}

.puzzle__feedback.after .continue:hover {
  background: #64abed;
}

.puzzle__feedback.after .continue i::before {
  font-size: 2.5em;
  margin-right: 10px;
}

.puzzle__feedback.after.call {
  flex: 17rem 1 0;
}

.puzzle__feedback.after .vote_call {
  text-align: right;
  background: #629924;
  color: #fff;
  padding: 8px 10px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
