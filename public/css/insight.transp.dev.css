/* Colors */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* text over primary background */
/* Secondary: green */
/* text over secondary background */
/* Accent: orange */
/* text over accent background */
/* Brag: gold */
/* text over brag background */
/* Error: red */
/* text over brag background */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Fancy: pink */
/* text over brag background */
/* Borders */
/* Shadows */
/* even rows in list or tables, subtle shade of $c-bg-high */
/* Primary: blue */
/* Secondary: green */
/* Brag: gold */
/* Fancy: pink */
/* Good: green */
/* Warn: orange */
/* Bad: red */
/* Common imports for all CSS modules */
/* Widths */
/* Heights */
/* Orientations */
/* Capabilities */
/* Aliases */
/* Uniboard: keep the same page layout accross pages */
/* when the width is appropriate for col1, but landscape prevents it */
/* atm only chrome supports min-content, max-content */
.slist thead, #insight .panel-tabs .tab {
  font-family: 'Roboto';
}

/* text printed directly on the page background deserves special treatment (transp theme) */
.slist thead, #insight .box .top {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.5) 100%);
}

#modal-wrap {
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
}

.ms-drop ul > li.multiple label {
  white-space: nowrap;
  overflow: hidden;
}

#modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.6);
  z-index: 109;
}

#insight .loading .spinner {
  position: absolute;
  width: 100%;
  height: 100%;
}

#modal-overlay, #insight .loading .spinner {
  /* extends %flex-wrap */
  display: flex;
  flex-flow: row wrap;
  align-items: center;
}

#insight .panel-tabs {
  display: flex;
  flex-flow: row;
  align-items: center;
}

#modal-wrap {
  display: flex;
  flex-flow: column;
}

.ms-drop, #insight .presets, #insight .box, #modal-wrap, #insight .boards a {
  border-radius: 3px;
}

.ms-drop {
  overflow: hidden;
  /* helps with clipping background into border-radius */
}

#insight header, #insight .box .top {
  border-radius: 3px 3px 0 0;
}

#insight .presets, #insight .box, .ms-drop, #modal-wrap .close:hover {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
}

body ::-webkit-scrollbar,
body ::-webkit-scrollbar-corner {
  width: .5rem;
  background: rgba(0, 0, 0, 0.6);
}

body ::-webkit-scrollbar-thumb {
  background: #4d4d4d;
}

body ::-webkit-scrollbar-thumb:hover,
body ::-webkit-scrollbar-thumb:active {
  background: #7a7a7a;
}

.slist {
  width: 100%;
  border-bottom: 1px solid #404040;
}

.slist thead th {
  border-top: 1px solid #404040;
  border-bottom: 1px solid #404040;
  padding: .5rem .8rem;
}

.slist thead th.large {
  font-size: 1.2rem;
}

.slist td {
  padding: 1rem;
}

.slist td .label {
  font-family: monospace;
  font-size: .8rem;
}

.slist tbody tr:nth-child(even) {
  background: rgba(255, 255, 255, 0.05);
}

.slist td:first-child,
.slist th:first-child {
  padding-left: 1.5rem;
}

.slist-pad td:first-child,
.slist-pad th:first-child {
  padding-left: var(--box-padding);
}

.slist-pad td:last-child,
.slist-pad th:last-child {
  padding-right: var(--box-padding);
}

#modal-overlay {
  justify-content: center;
}

#modal-wrap {
  background: rgba(0, 0, 0, 0.6);
  position: relative;
  padding: 2rem;
  text-align: center;
  max-width: 100vw;
  max-height: 96vh;
}

#modal-wrap > div {
  overflow: auto;
}

#modal-wrap .close {
  color: #cccccc;
  position: absolute;
  font-size: 16px;
  line-height: 27px;
  width: 32px;
  height: 32px;
  cursor: pointer;
  top: 0;
  right: 0;
  background: none;
}

@media (min-width: 800px) {
  #modal-wrap .close {
    top: -12px;
    right: -12px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 50%;
  }
}

#modal-wrap .close:hover {
  background: #cc3333;
  color: #fff;
}

.ms-parent {
  display: inline-block;
  position: relative;
  vertical-align: middle;
}

.ms-choice {
  display: block;
  width: 100%;
  height: 26px;
  padding: 0;
  overflow: hidden;
  cursor: pointer;
  border: 1px solid #404040;
  text-align: left;
  white-space: nowrap;
  line-height: 26px;
  text-decoration: none;
  -webkit-border-radius: 2px;
  -moz-border-radius: 2px;
  border-radius: 2px;
  background-color: rgba(0, 0, 0, 0.6);
}

.ms-choice.disabled {
  background-color: #4d4d4d;
  background-image: none;
  cursor: default;
}

.ms-choice > span {
  position: absolute;
  top: 0;
  left: 0;
  right: 20px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: block;
  padding-left: 8px;
}

.ms-choice > div {
  position: absolute;
  top: 0;
  right: 0;
  width: 20px;
  height: 25px;
  background: url("../vendor/multiple-select/multiple-select.png") left top no-repeat;
}

.ms-choice > div.open {
  background: url("../vendor/multiple-select/multiple-select.png") right top no-repeat;
}

.ms-drop {
  width: 100%;
  display: none;
  margin-top: -1px;
  padding: 0;
  position: absolute;
  z-index: 1000;
  background: rgba(0, 0, 0, 0.6);
  border: 1px solid #404040;
}

.ms-drop.bottom {
  top: 100%;
  box-shadow: 0 4px 5px rgba(0, 0, 0, 0.15);
}

.ms-drop.top {
  bottom: 100%;
  box-shadow: 0 -4px 5px rgba(0, 0, 0, 0.15);
}

.ms-search {
  display: inline-block;
  margin: 0;
  min-height: 26px;
  padding: 4px;
  position: relative;
  white-space: nowrap;
  width: 100%;
  z-index: 10000;
}

.ms-search input {
  width: 100%;
  height: auto !important;
  min-height: 24px;
  padding: 0 20px 0 5px;
  margin: 0;
  outline: 0;
  font-size: 1em;
  border: 1px solid #404040;
  border-radius: 0;
  box-shadow: none;
  background: url("../images/../vendor/multiple-select/multiple-select.png") no-repeat 100% -22px;
}

.ms-drop ul {
  overflow: auto;
  margin: 0;
  padding: 5px 8px;
}

.ms-drop ul > li {
  list-style: none;
  display: list-item;
  background-image: none;
  position: static;
}

.ms-drop ul > li .disabled {
  opacity: .35;
}

.ms-drop ul > li.multiple {
  display: block;
  float: left;
}

.ms-drop ul > li.group {
  clear: both;
}

.ms-drop ul > li.multiple label {
  width: 100%;
  display: block;
  text-overflow: ellipsis;
}

.ms-drop ul > li label {
  font-weight: normal;
  display: block;
  white-space: nowrap;
}

.ms-drop ul > li label.optgroup {
  font-weight: bold;
}

.ms-drop input[type="checkbox"] {
  vertical-align: middle;
}

.ms-drop .ms-no-results {
  display: none;
}

#insight > div {
  display: grid;
  grid-template-columns: minmax(280px, 15vw);
  grid-template-rows: 60px;
  grid-template-areas: 'side head' 'side meat';
  grid-gap: 0 2vmin;
}

#insight .loading .meat {
  position: relative;
}

#insight .loading .spinner {
  top: 0;
  left: 0;
  height: 550px;
  opacity: 0.7;
}

#insight .loading .spinner svg {
  margin: auto;
  width: 80px;
  height: 80px;
}

#insight .broken {
  display: flex;
  flex-flow: column;
  align-items: center;
  text-align: center;
  padding: 200px 0;
  width: 100%;
}

#insight .broken i {
  font-size: 50px;
}

#insight .chart {
  height: 550px;
}

#insight .loading .chart {
  filter: blur(3px);
  opacity: 0.5;
}

#insight .chart.empty {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-flow: column;
  font-size: 1.5em;
  opacity: 0.7;
}

#insight .chart.empty i {
  margin-bottom: 30px;
  display: block;
  font-size: 200px;
  opacity: 0.5;
}

#insight .left-side {
  grid-area: side;
}

#insight header {
  background: #333;
  color: #ddd;
  height: 100%;
  grid-area: head;
}

#insight header h2 {
  font-size: 2em;
  line-height: 60px;
}

#insight header h2::before {
  font-size: 42px;
  vertical-align: top;
  line-height: 60px;
  margin: 0 10px;
}

#insight header > * {
  display: inline-block;
}

#insight header .ms-choice {
  background: #444;
  color: #ddd;
  border-color: #666;
}

#insight .meat {
  background: rgba(0, 0, 0, 0.6);
  border: 1px solid #404040;
  border-top: 0;
  grid-area: meat;
}

#insight .axis-form {
  float: right;
}

#insight .axis-form .by {
  padding: 0 20px;
}

#insight .axis-form .ms-choice {
  padding: 30px 10px;
  border-width: 0 1px;
  border-radius: 0;
  transition: 0.15s;
}

#insight .axis-form .ms-choice span {
  line-height: 60px;
  text-align: center;
}

#insight .axis-form .ms-choice div {
  top: 18px;
}

#insight .axis-form .ms-drop {
  color: #cccccc;
}

#insight .axis-form .ms-drop ul > li label input {
  display: none;
}

#insight .axis-form .ms-drop ul > li.selected label {
  background: #d64f00;
  color: #fff;
}

#insight .panel-tabs {
  justify-content: center;
  align-items: flex-end;
  border-bottom: 2px solid #404040;
}

#insight .panel-tabs .tab {
  flex: 1 1 auto;
  text-align: center;
  padding: .5em .2em;
  cursor: pointer;
  position: relative;
  color: #f7f7f7;
  transition: color 0.25s;
  min-width: 15%;
}

#insight .panel-tabs .tab::after {
  content: '';
  background: rgba(214, 79, 0, 0.6);
  height: 2px;
  position: absolute;
  width: 96%;
  left: 2%;
  bottom: -2px;
  transition: all 0.25s;
  transform: scale(0);
}

#insight .panel-tabs .tab.active::after, #insight .panel-tabs .tab:hover::after {
  transform: scale(1);
}

#insight .panel-tabs .tab.active {
  color: #d64f00;
}

#insight .presets a {
  color: #cccccc;
  display: block;
  padding: .7em;
  transition: all 150ms;
}

#insight .presets a::before {
  opacity: 0.7;
  transition: opacity 0.13s;
}

#insight .presets a:hover {
  background: rgba(79, 29, 0, 0.68);
}

#insight .presets a:hover::before {
  opacity: 1;
}

#insight .presets a.active {
  color: #d64f00;
}

#insight .clear {
  color: #cc3333;
  font-size: .9em;
  margin-bottom: .5em;
}

#insight .filters .box {
  border-bottom-width: 0;
}

#insight .filters .box:last-child {
  border-bottom-width: 1px;
}

#insight .filters .ms-parent {
  display: block;
}

#insight .filters .ms-choice {
  padding: 15px 10px;
  border-width: 0 0 1px 0;
  transition: all 150ms;
}

#insight .filters .ms-parent:last-child .ms-choice {
  border-bottom: 0;
}

#insight .filters .ms-parent.selected .ms-choice {
  background: linear-gradient(to right, rgba(214, 79, 0, 0.7) 0px, rgba(214, 79, 0, 0.7) 5px, rgba(0, 0, 0, 0) 5px, rgba(0, 0, 0, 0) 100%);
}

#insight .filters .ms-parent:hover .ms-choice {
  background: rgba(79, 29, 0, 0.68);
}

#insight .filters .ms-choice span {
  text-align: right;
  line-height: 30px;
  background: none;
}

#insight .filters .ms-choice div {
  top: 4px;
}

#insight .filters .ms-drop ul > li label input {
  margin-right: 5px;
  cursor: pointer;
}

#insight .filters .ms-drop {
  margin-left: 99%;
  top: 0;
  left: 0;
}

#insight .ms-parent,
#insight .ms-parent button {
  user-select: none;
}

#insight .ms-choice:focus,
#insight .ms-parent input:focus {
  outline: 0;
}

#insight .ms-drop {
  font-size: .9em;
}

#insight .ms-drop ul {
  padding: 0;
  overflow: auto;
}

#insight .ms-drop ul > li label:not(.optgroup) {
  padding: 4px 8px;
  cursor: pointer;
  transition: all 150ms;
  text-indent: 1em;
}

#insight .ms-drop ul > li label:not(.optgroup):hover {
  background: rgba(79, 29, 0, 0.68);
}

#insight .ms-drop ul > li label.optgroup {
  border-top: 1px solid #404040;
  margin-top: 5px;
  text-indent: 0;
  text-transform: uppercase;
  font-weight: normal;
  opacity: 0.6;
  padding: 6px 8px 2px 8px;
}

#insight .ms-drop ul > li:first-child label.optgroup {
  margin-top: 0;
}

#insight .box .top {
  padding: 1vmin 2vmin;
  font-weight: bold;
  border-bottom: 1px solid #404040;
}

#insight .box .content {
  padding: 2vmin;
}

#insight .info {
  margin-bottom: 2vmin;
}

#insight .info p {
  margin: 0;
}

#insight .info .insight-stale {
  padding: 2vmin;
}

#insight .info .insight-stale button {
  width: 100%;
}

#insight .info .help {
  float: right;
}

#insight .info .share a {
  text-decoration: underline;
}

#insight .help.box {
  margin-top: 20px;
}

#insight .help .dimension {
  margin-top: 10px;
}

#insight .help h3 {
  margin: 0;
  font-weight: bold;
}

#insight .help a {
  text-decoration: underline;
}

#insight td.data {
  font-weight: bold;
}

#insight .game-sample {
  margin: 2em 0 1em 0;
  border-top: 1px solid #404040;
  box-shadow: none;
}

#insight .boards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 25%));
}

#insight .boards a {
  transition: background 150ms;
  color: #cccccc;
  padding: .4em;
}

#insight .boards a span {
  box-shadow: none;
  background: none;
}

#insight .boards a:hover {
  background: rgba(20, 54, 85, 0.68);
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
