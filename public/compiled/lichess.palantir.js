(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Palantir = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const li = window.lichess;
function palantir(opts) {
    const devices = navigator.mediaDevices;
    if (!devices)
        return alert('Voice chat requires navigator.mediaDevices');
    let state = 'off', peer, myStream;
    function start() {
        setState('opening');
        peer = new window['Peer'](peerIdOf(opts.uid))
            .on('open', () => {
            setState('getting-media');
            devices.getUserMedia({ video: false, audio: true }).then((s) => {
                myStream = s;
                setState('ready');
                li.sound.say("Voice chat is ready.", true, true);
                ping();
            }, function (err) {
                log(`Failed to get local stream: ${err}`);
            }).catch(err => log(err));
        })
            .on('call', (call) => {
            if (!findOpenConnectionTo(call.peer)) {
                setState('answering', call.peer);
                startCall(call);
                call.answer(myStream);
            }
        })
            .on('stream', s => {
            console.log('stream', s);
        })
            .on('connection', c => {
            log("Connected to: " + c.peer);
        })
            .on('disconnected', () => {
            if (state == 'stopping')
                destroyPeer();
            else {
                setState('opening', 'reconnect');
                peer.reconnect();
            }
        })
            .on('close', () => log('peer.close'))
            .on('error', err => log(`peer.error: ${err}`));
    }
    function startCall(call) {
        call
            .on('stream', () => {
            log('call.stream');
            setState('on', call.peer);
            li.sound.say("Connected", true, true);
        })
            .on('close', () => {
            log('call.close');
            stopCall(call);
        })
            .on('error', e => {
            log(`call.error: ${e}`);
            stopCall(call);
        });
        closeOtherConnectionsTo(call.peer);
    }
    function stopCall(_) {
        if (!hasAnOpenConnection())
            setState('ready', 'no call remaining');
    }
    function call(uid) {
        const peerId = peerIdOf(uid);
        if (peer &&
            myStream &&
            peer.id < peerId && // yes that's how we decide who calls who
            !findOpenConnectionTo(peerId)) {
            setState('calling', peerId);
            startCall(peer.call(peerId, myStream));
        }
    }
    function stop() {
        if (peer && state != 'off') {
            setState('stopping');
            peer.disconnect();
        }
    }
    function log(msg) {
        console.log('[palantir]', msg);
    }
    function setState(s, msg = '') {
        log(`state: ${state} -> ${s} ${msg}`);
        state = s;
        opts.redraw();
    }
    function peerIdOf(uid) {
        const host = location.hostname;
        const hash = btoa(li.reverse(btoa(li.reverse(uid + host)))).replace(/=/g, '');
        return `${host.replace('.', '-')}-${uid}-${hash}`;
    }
    function destroyPeer() {
        if (peer) {
            peer.destroy();
            peer = undefined;
        }
        if (myStream) {
            myStream.getTracks().forEach(t => t.stop());
            myStream = undefined;
        }
        setState('off');
    }
    function connectionsTo(peerId) {
        return (peer && peer.connections[peerId]) || [];
    }
    function findOpenConnectionTo(peerId) {
        return connectionsTo(peerId).find(c => c.open);
    }
    function closeOtherConnectionsTo(peerId) {
        const conns = connectionsTo(peerId);
        for (let i = 0; i < conns.length - 1; i++)
            conns[i].close();
    }
    function closeDisconnectedCalls() {
        if (peer) {
            for (let otherPeer in peer.connections) {
                peer.connections[otherPeer].forEach(c => {
                    if (c.peerConnection && c.peerConnection.connectionState == 'disconnected') {
                        log(`close disconnected call to ${c.peer}`);
                        c.close();
                        opts.redraw();
                    }
                });
            }
        }
    }
    function allOpenConnections() {
        if (!peer)
            return [];
        const conns = [];
        for (let peerId in peer.connections) {
            const c = findOpenConnectionTo(peerId);
            if (c)
                conns.push(c);
        }
        return conns;
    }
    function hasAnOpenConnection() {
        return allOpenConnections().length > 0;
    }
    function ping() {
        if (state != 'off')
            li.pubsub.emit('socket.send', 'palantirPing');
    }
    li.pubsub.on('socket.in.palantir', uids => uids.forEach(call));
    li.pubsub.on('socket.in.palantirOff', li.reload); // remote disconnection
    li.pubsub.on('palantir.toggle', v => { if (!v)
        stop(); });
    start();
    setInterval(closeDisconnectedCalls, 1400);
    setInterval(ping, 5000);
    setInterval(function () {
        peer && Object.keys(peer.connections).forEach(peerId => {
            console.log(peerId, !!findOpenConnectionTo(peerId));
        });
    }, 3000);
    return {
        render: h => {
            const connections = allOpenConnections();
            return devices ? h('div.mchat__tab.palantir.data-count.palantir-' + state, {
                attrs: {
                    'data-icon': 'î€ ',
                    title: `Voice chat: ${state}`,
                    'data-count': state == 'on' ? connections.length + 1 : 0
                },
                hook: {
                    insert(vnode) {
                        vnode.elm.addEventListener('click', () => peer ? stop() : start());
                    }
                }
            }, state == 'on' ?
                connections.map(c => h('audio.palantir__audio.' + c.peer, {
                    attrs: { autoplay: true },
                    hook: { insert(vnode) { vnode.elm.srcObject = c.remoteStream; } }
                })) : []) : null;
        }
    };
}
exports.palantir = palantir;

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
